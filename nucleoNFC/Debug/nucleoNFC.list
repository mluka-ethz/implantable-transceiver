
nucleoNFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f10  08004f10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f10  08004f10  00014f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f18  08004f18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004f90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004f90  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faa9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fd  00000000  00000000  0002fb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000329c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027246  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def4  00000000  00000000  0005a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebaa3  00000000  00000000  000686aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015414d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  001541a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004df0 	.word	0x08004df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004df0 	.word	0x08004df0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d013      	beq.n	80005a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000588:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000590:	e000      	b.n	8000594 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000592:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800059e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b095      	sub	sp, #84	; 0x54
 80005bc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fc93 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f891 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f977 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f945 	bl	8000858 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80005ce:	f000 f903 	bl	80007d8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  static const uint16_t REG_DATA = 0x2002;
  uint8_t data;
  int problem = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]

  data = NFC_ReadFromUserAddress(&ret, hi2c3, REG_DATA);
 80005d6:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <main+0x11c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4e3f      	ldr	r6, [pc, #252]	; (80006d8 <main+0x120>)
 80005dc:	f107 0c02 	add.w	ip, r7, #2
 80005e0:	9310      	str	r3, [sp, #64]	; 0x40
 80005e2:	466d      	mov	r5, sp
 80005e4:	f106 040c 	add.w	r4, r6, #12
 80005e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80005fc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000600:	4660      	mov	r0, ip
 8000602:	f000 f9d3 	bl	80009ac <NFC_ReadFromUserAddress>
 8000606:	4603      	mov	r3, r0
 8000608:	70fb      	strb	r3, [r7, #3]
  printf("data = %x \n", data);
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	4619      	mov	r1, r3
 800060e:	4833      	ldr	r0, [pc, #204]	; (80006dc <main+0x124>)
 8000610:	f003 fc22 	bl	8003e58 <iprintf>
  while(problem){
 8000614:	e018      	b.n	8000648 <main+0x90>
	  problem = NFC_EnableEH(&ret, hi2c3);
 8000616:	4e30      	ldr	r6, [pc, #192]	; (80006d8 <main+0x120>)
 8000618:	f107 0c02 	add.w	ip, r7, #2
 800061c:	466d      	mov	r5, sp
 800061e:	f106 040c 	add.w	r4, r6, #12
 8000622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800062a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800062c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800062e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000632:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000636:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800063a:	4660      	mov	r0, ip
 800063c:	f000 fa08 	bl	8000a50 <NFC_EnableEH>
 8000640:	6078      	str	r0, [r7, #4]
	  printf("trying \n");
 8000642:	4827      	ldr	r0, [pc, #156]	; (80006e0 <main+0x128>)
 8000644:	f003 fc8e 	bl	8003f64 <puts>
  while(problem){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e3      	bne.n	8000616 <main+0x5e>
  }
  problem = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
  while(problem){
 8000652:	e018      	b.n	8000686 <main+0xce>
  	  problem = NFC_DisableEH(&ret, hi2c3);
 8000654:	4e20      	ldr	r6, [pc, #128]	; (80006d8 <main+0x120>)
 8000656:	f107 0c02 	add.w	ip, r7, #2
 800065a:	466d      	mov	r5, sp
 800065c:	f106 040c 	add.w	r4, r6, #12
 8000660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000670:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000674:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000678:	4660      	mov	r0, ip
 800067a:	f000 fa25 	bl	8000ac8 <NFC_DisableEH>
 800067e:	6078      	str	r0, [r7, #4]
  	  printf("trying \n");
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0x128>)
 8000682:	f003 fc6f 	bl	8003f64 <puts>
  while(problem){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1e3      	bne.n	8000654 <main+0x9c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	data = NFC_ReadFromUserAddress(&ret, hi2c3, REG_DATA);
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <main+0x11c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4e11      	ldr	r6, [pc, #68]	; (80006d8 <main+0x120>)
 8000692:	f107 0c02 	add.w	ip, r7, #2
 8000696:	9310      	str	r3, [sp, #64]	; 0x40
 8000698:	466d      	mov	r5, sp
 800069a:	f106 040c 	add.w	r4, r6, #12
 800069e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80006b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006b6:	4660      	mov	r0, ip
 80006b8:	f000 f978 	bl	80009ac <NFC_ReadFromUserAddress>
 80006bc:	4603      	mov	r3, r0
 80006be:	70fb      	strb	r3, [r7, #3]
	printf("EH is %x \n", data);
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <main+0x12c>)
 80006c6:	f003 fbc7 	bl	8003e58 <iprintf>
	HAL_Delay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ce:	f000 fc87 	bl	8000fe0 <HAL_Delay>
	data = NFC_ReadFromUserAddress(&ret, hi2c3, REG_DATA);
 80006d2:	e7db      	b.n	800068c <main+0xd4>
 80006d4:	08004e28 	.word	0x08004e28
 80006d8:	20000098 	.word	0x20000098
 80006dc:	08004e08 	.word	0x08004e08
 80006e0:	08004e14 	.word	0x08004e14
 80006e4:	08004e1c 	.word	0x08004e1c

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0b8      	sub	sp, #224	; 0xe0
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f2:	2244      	movs	r2, #68	; 0x44
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fba6 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2288      	movs	r2, #136	; 0x88
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fb98 	bl	8003e48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000722:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	2310      	movs	r3, #16
 8000728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800073e:	230a      	movs	r3, #10
 8000740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000744:	2307      	movs	r3, #7
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fc62 	bl	8002024 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000766:	f000 f91c 	bl	80009a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2303      	movs	r3, #3
 8000772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000788:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800078c:	2104      	movs	r1, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f002 f82e 	bl	80027f0 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079a:	f000 f902 	bl	80009a2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 800079e:	f44f 7381 	mov.w	r3, #258	; 0x102
 80007a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fa24 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ba:	f000 f8f2 	bl	80009a2 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c2:	f001 fbd9 	bl	8001f78 <HAL_PWREx_ControlVoltageScaling>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007cc:	f000 f8e9 	bl	80009a2 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	37e0      	adds	r7, #224	; 0xe0
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_I2C3_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_I2C3_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_I2C3_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <MX_I2C3_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_I2C3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_I2C3_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_I2C3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_I2C3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_I2C3_Init+0x74>)
 8000814:	f000 feb0 	bl	8001578 <HAL_I2C_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 f8c0 	bl	80009a2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_I2C3_Init+0x74>)
 8000826:	f001 fb01 	bl	8001e2c <HAL_I2CEx_ConfigAnalogFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 f8b7 	bl	80009a2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_I2C3_Init+0x74>)
 8000838:	f001 fb43 	bl	8001ec2 <HAL_I2CEx_ConfigDigitalFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f8ae 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000098 	.word	0x20000098
 8000850:	40005c00 	.word	0x40005c00
 8000854:	10909cec 	.word	0x10909cec

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f002 fe6a 	bl	8003574 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f87c 	bl	80009a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000e4 	.word	0x200000e4
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a2a      	ldr	r2, [pc, #168]	; (800097c <MX_GPIO_Init+0xc4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <MX_GPIO_Init+0xc4>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <MX_GPIO_Init+0xc4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_GPIO_Init+0xc4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fe07 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_GPIO_Init+0xcc>)
 8000950:	f000 fc50 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f000 fc41 	bl	80011f4 <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	10210000 	.word	0x10210000
 8000984:	48000800 	.word	0x48000800

08000988 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fde8 	bl	8000568 <ITM_SendChar>
    return ch;
 8000998:	687b      	ldr	r3, [r7, #4]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a6:	b672      	cpsid	i
}
 80009a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009aa:	e7fe      	b.n	80009aa <Error_Handler+0x8>

080009ac <NFC_ReadFromUserAddress>:

	return 1;

}

uint8_t NFC_ReadFromUserAddress(HAL_StatusTypeDef *ret, I2C_HandleTypeDef i2c,uint16_t address){
 80009ac:	b084      	sub	sp, #16
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af02      	add	r7, sp, #8
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	f107 001c 	add.w	r0, r7, #28
 80009ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const uint8_t st25dv_ADDR = 0b10100110;
	uint8_t buf[2];
	buf[0] = (address & (uint16_t)0xFF00)/256; // most significant byte
 80009be:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80009c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	da00      	bge.n	80009cc <NFC_ReadFromUserAddress+0x20>
 80009ca:	33ff      	adds	r3, #255	; 0xff
 80009cc:	121b      	asrs	r3, r3, #8
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	733b      	strb	r3, [r7, #12]
	buf[1] = (address & (uint16_t)0x00FF); // least significan byte
 80009d2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	737b      	strb	r3, [r7, #13]
	uint8_t data[1];
	*ret = HAL_I2C_Master_Transmit(&i2c, st25dv_ADDR, buf, 2, HAL_MAX_DELAY);
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <NFC_ReadFromUserAddress+0xa0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b299      	uxth	r1, r3
 80009e0:	f107 020c 	add.w	r2, r7, #12
 80009e4:	f107 001c 	add.w	r0, r7, #28
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2302      	movs	r3, #2
 80009f0:	f000 fe52 	bl	8001698 <HAL_I2C_Master_Transmit>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	701a      	strb	r2, [r3, #0]
	if ( *ret != HAL_OK ) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <NFC_ReadFromUserAddress+0x5c>
		        //printf("Error Rx\r\n");
		        return 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e019      	b.n	8000a3c <NFC_ReadFromUserAddress+0x90>
		  } else{
			  *ret = HAL_I2C_Master_Receive(&i2c, st25dv_ADDR+1, data, 1, HAL_MAX_DELAY);
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <NFC_ReadFromUserAddress+0xa0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b299      	uxth	r1, r3
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	f107 001c 	add.w	r0, r7, #28
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	f000 ff2d 	bl	8001880 <HAL_I2C_Master_Receive>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	701a      	strb	r2, [r3, #0]
			  	  if ( *ret != HAL_OK ) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <NFC_ReadFromUserAddress+0x8e>
			  	        //printf("Error Rx\r\n");
			  	        return 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <NFC_ReadFromUserAddress+0x90>
			  	  } else{
			  		  //printf("success \n");
			  		  return data[0];
 8000a3a:	7a3b      	ldrb	r3, [r7, #8]
		  }


	return 1;

}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a46:	b004      	add	sp, #16
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	08004e2a 	.word	0x08004e2a

08000a50 <NFC_EnableEH>:


int NFC_EnableEH(HAL_StatusTypeDef *ret, I2C_HandleTypeDef i2c){
 8000a50:	b084      	sub	sp, #16
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af02      	add	r7, sp, #8
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	f107 001c 	add.w	r0, r7, #28
 8000a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const uint8_t st25dv_ADDR = 0b10100110;
	uint16_t address = 0x2002;
 8000a62:	f242 0302 	movw	r3, #8194	; 0x2002
 8000a66:	81fb      	strh	r3, [r7, #14]
	uint8_t buf[3];
	buf[0] = (address & (uint16_t)0xFF00)/256; // most significant byte
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da00      	bge.n	8000a74 <NFC_EnableEH+0x24>
 8000a72:	33ff      	adds	r3, #255	; 0xff
 8000a74:	121b      	asrs	r3, r3, #8
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	723b      	strb	r3, [r7, #8]
	buf[1] = (address & (uint16_t)0x00FF); // least significan byte
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	727b      	strb	r3, [r7, #9]
	buf[2] = 0x0F;
 8000a80:	230f      	movs	r3, #15
 8000a82:	72bb      	strb	r3, [r7, #10]

	*ret = HAL_I2C_Master_Transmit(&i2c, st25dv_ADDR, buf, 3, HAL_MAX_DELAY);
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <NFC_EnableEH+0x74>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b299      	uxth	r1, r3
 8000a8a:	f107 0208 	add.w	r2, r7, #8
 8000a8e:	f107 001c 	add.w	r0, r7, #28
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f000 fdfd 	bl	8001698 <HAL_I2C_Master_Transmit>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	701a      	strb	r2, [r3, #0]
		  if ( *ret != HAL_OK ) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <NFC_EnableEH+0x62>
		        //printf("Error Tx\r\n");
		        return 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <NFC_EnableEH+0x64>
		  } else{
			  //printf("success \n");
			  return 0;
 8000ab2:	2300      	movs	r3, #0
		  }

}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000abe:	b004      	add	sp, #16
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	08004e2b 	.word	0x08004e2b

08000ac8 <NFC_DisableEH>:

int NFC_DisableEH(HAL_StatusTypeDef *ret, I2C_HandleTypeDef i2c){
 8000ac8:	b084      	sub	sp, #16
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af02      	add	r7, sp, #8
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	f107 001c 	add.w	r0, r7, #28
 8000ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const uint8_t st25dv_ADDR = 0b10100110;
	uint16_t address = 0x2002;
 8000ada:	f242 0302 	movw	r3, #8194	; 0x2002
 8000ade:	81fb      	strh	r3, [r7, #14]
	uint8_t buf[3];
	buf[0] = (address & (uint16_t)0xFF00)/256; // most significant byte
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da00      	bge.n	8000aec <NFC_DisableEH+0x24>
 8000aea:	33ff      	adds	r3, #255	; 0xff
 8000aec:	121b      	asrs	r3, r3, #8
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	723b      	strb	r3, [r7, #8]
	buf[1] = (address & (uint16_t)0x00FF); // least significan byte
 8000af2:	89fb      	ldrh	r3, [r7, #14]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	727b      	strb	r3, [r7, #9]
	buf[2] = 0x00;
 8000af8:	2300      	movs	r3, #0
 8000afa:	72bb      	strb	r3, [r7, #10]

	*ret = HAL_I2C_Master_Transmit(&i2c, st25dv_ADDR, buf, 3, HAL_MAX_DELAY);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <NFC_DisableEH+0x74>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b299      	uxth	r1, r3
 8000b02:	f107 0208 	add.w	r2, r7, #8
 8000b06:	f107 001c 	add.w	r0, r7, #28
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2303      	movs	r3, #3
 8000b12:	f000 fdc1 	bl	8001698 <HAL_I2C_Master_Transmit>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	701a      	strb	r2, [r3, #0]
		  if ( *ret != HAL_OK ) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <NFC_DisableEH+0x62>
		        //printf("Error Tx\r\n");
		        return 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e000      	b.n	8000b2c <NFC_DisableEH+0x64>
		  } else{
			  //printf("success \n");
			  return 0;
 8000b2a:	2300      	movs	r3, #0
		  }

}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b36:	b004      	add	sp, #16
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	08004e2c 	.word	0x08004e2c

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_I2C_MspInit+0x7c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d127      	bne.n	8000bfa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_I2C_MspInit+0x80>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_I2C_MspInit+0x80>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_I2C_MspInit+0x80>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc6:	2312      	movs	r3, #18
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <HAL_I2C_MspInit+0x84>)
 8000bde:	f000 fb09 	bl	80011f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_I2C_MspInit+0x80>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_I2C_MspInit+0x80>)
 8000be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_I2C_MspInit+0x80>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40005c00 	.word	0x40005c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000800 	.word	0x48000800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x7c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d128      	bne.n	8000c84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c72:	2307      	movs	r3, #7
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 fab8 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40021000 	.word	0x40021000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f95e 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe23 	bl	8000988 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
	}
	return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f002 fffe 	bl	8003df4 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20018000 	.word	0x20018000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	2000008c 	.word	0x2000008c
 8000e2c:	20000180 	.word	0x20000180

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <SystemInit+0x5c>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <SystemInit+0x5c>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <SystemInit+0x60>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <SystemInit+0x60>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <SystemInit+0x60>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <SystemInit+0x60>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <SystemInit+0x60>)
 8000e5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <SystemInit+0x60>)
 8000e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SystemInit+0x60>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SystemInit+0x60>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SystemInit+0x60>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00
 8000e90:	40021000 	.word	0x40021000

08000e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e98:	f7ff ffca 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <LoopForever+0x16>)
	cmp	r2, r3
 8000ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 ff9d 	bl	8003e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec6:	f7ff fb77 	bl	80005b8 <main>

08000eca <LoopForever>:

LoopForever:
    b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ed0:	08004f20 	.word	0x08004f20
	ldr	r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ed8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000edc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ee0:	2000017c 	.word	0x2000017c

08000ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_2_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_Init+0x3c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_Init+0x3c>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f944 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f80f 	bl	8000f28 <HAL_InitTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	e001      	b.n	8000f1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f16:	f7ff fe13 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d023      	beq.n	8000f84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_InitTick+0x70>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_InitTick+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f941 	bl	80011da <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10f      	bne.n	8000f7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d809      	bhi.n	8000f78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	f000 f919 	bl	80011a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_InitTick+0x74>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e007      	b.n	8000f88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e004      	b.n	8000f88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e001      	b.n	8000f88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000168 	.word	0x20000168

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000168 	.word	0x20000168

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_SetPriority>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff47 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5c 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb0 	bl	8001148 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	e17f      	b.n	8001504 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8171 	beq.w	80014fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d00b      	beq.n	800123c <HAL_GPIO_Init+0x48>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d007      	beq.n	800123c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001230:	2b11      	cmp	r3, #17
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d130      	bne.n	800129e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001272:	2201      	movs	r2, #1
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 0201 	and.w	r2, r3, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d118      	bne.n	80012dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x128>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b12      	cmp	r3, #18
 800131a:	d123      	bne.n	8001364 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0203 	and.w	r2, r3, #3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80ac 	beq.w	80014fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	4a5e      	ldr	r2, [pc, #376]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	; 0x60
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013be:	4a5a      	ldr	r2, [pc, #360]	; (8001528 <HAL_GPIO_Init+0x334>)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013e8:	d025      	beq.n	8001436 <HAL_GPIO_Init+0x242>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <HAL_GPIO_Init+0x338>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d01f      	beq.n	8001432 <HAL_GPIO_Init+0x23e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_GPIO_Init+0x33c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d019      	beq.n	800142e <HAL_GPIO_Init+0x23a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <HAL_GPIO_Init+0x340>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x236>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_GPIO_Init+0x344>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x232>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	; (800153c <HAL_GPIO_Init+0x348>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x22e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x34c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x22a>
 800141a:	2306      	movs	r3, #6
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x244>
 800141e:	2307      	movs	r3, #7
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x244>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x244>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x244>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x244>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x244>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x244>
 8001436:	2300      	movs	r3, #0
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_GPIO_Init+0x334>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800147a:	4a32      	ldr	r2, [pc, #200]	; (8001544 <HAL_GPIO_Init+0x350>)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	f47f ae78 	bne.w	8001204 <HAL_GPIO_Init+0x10>
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000
 800152c:	48000400 	.word	0x48000400
 8001530:	48000800 	.word	0x48000800
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48001000 	.word	0x48001000
 800153c:	48001400 	.word	0x48001400
 8001540:	48001800 	.word	0x48001800
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001564:	e002      	b.n	800156c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e081      	b.n	800168e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff faf2 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	e006      	b.n	8001600 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d104      	bne.n	8001612 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001610:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ea42 0103 	orr.w	r1, r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	021a      	lsls	r2, r3, #8
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69d9      	ldr	r1, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	817b      	strh	r3, [r7, #10]
 80016a8:	4613      	mov	r3, r2
 80016aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	f040 80da 	bne.w	800186e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_I2C_Master_Transmit+0x30>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e0d3      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1d8>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016d0:	f7ff fc7a 	bl	8000fc8 <HAL_GetTick>
 80016d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2319      	movs	r3, #25
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f9e6 	bl	8001ab4 <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0be      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2221      	movs	r2, #33	; 0x21
 80016f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2210      	movs	r2, #16
 80016fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	893a      	ldrh	r2, [r7, #8]
 8001712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	2bff      	cmp	r3, #255	; 0xff
 8001722:	d90e      	bls.n	8001742 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	b2da      	uxtb	r2, r3
 8001730:	8979      	ldrh	r1, [r7, #10]
 8001732:	4b51      	ldr	r3, [pc, #324]	; (8001878 <HAL_I2C_Master_Transmit+0x1e0>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fb48 	bl	8001dd0 <I2C_TransferConfig>
 8001740:	e06c      	b.n	800181c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001750:	b2da      	uxtb	r2, r3
 8001752:	8979      	ldrh	r1, [r7, #10]
 8001754:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_I2C_Master_Transmit+0x1e0>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fb37 	bl	8001dd0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001762:	e05b      	b.n	800181c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	6a39      	ldr	r1, [r7, #32]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 f9e3 	bl	8001b34 <I2C_WaitOnTXISFlagUntilTimeout>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e07b      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	3b01      	subs	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d034      	beq.n	800181c <HAL_I2C_Master_Transmit+0x184>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d130      	bne.n	800181c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	2200      	movs	r2, #0
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f975 	bl	8001ab4 <I2C_WaitOnFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e04d      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2bff      	cmp	r3, #255	; 0xff
 80017dc:	d90e      	bls.n	80017fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	22ff      	movs	r2, #255	; 0xff
 80017e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	8979      	ldrh	r1, [r7, #10]
 80017ec:	2300      	movs	r3, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 faeb 	bl	8001dd0 <I2C_TransferConfig>
 80017fa:	e00f      	b.n	800181c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180a:	b2da      	uxtb	r2, r3
 800180c:	8979      	ldrh	r1, [r7, #10]
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fada 	bl	8001dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d19e      	bne.n	8001764 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	6a39      	ldr	r1, [r7, #32]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f9c2 	bl	8001bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e01a      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2220      	movs	r2, #32
 8001840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_I2C_Master_Transmit+0x1e4>)
 800184e:	400b      	ands	r3, r1
 8001850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
  }
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	80002000 	.word	0x80002000
 800187c:	fe00e800 	.word	0xfe00e800

08001880 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	460b      	mov	r3, r1
 800188e:	817b      	strh	r3, [r7, #10]
 8001890:	4613      	mov	r3, r2
 8001892:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b20      	cmp	r3, #32
 800189e:	f040 80db 	bne.w	8001a58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2C_Master_Receive+0x30>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e0d4      	b.n	8001a5a <HAL_I2C_Master_Receive+0x1da>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018b8:	f7ff fb86 	bl	8000fc8 <HAL_GetTick>
 80018bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2319      	movs	r3, #25
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f8f2 	bl	8001ab4 <I2C_WaitOnFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0bf      	b.n	8001a5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2222      	movs	r2, #34	; 0x22
 80018de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2210      	movs	r2, #16
 80018e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	893a      	ldrh	r2, [r7, #8]
 80018fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	2bff      	cmp	r3, #255	; 0xff
 800190a:	d90e      	bls.n	800192a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	b2da      	uxtb	r2, r3
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <HAL_I2C_Master_Receive+0x1e4>)
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 fa54 	bl	8001dd0 <I2C_TransferConfig>
 8001928:	e06d      	b.n	8001a06 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_I2C_Master_Receive+0x1e4>)
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fa43 	bl	8001dd0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800194a:	e05c      	b.n	8001a06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6a39      	ldr	r1, [r7, #32]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f96b 	bl	8001c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e07c      	b.n	8001a5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d034      	beq.n	8001a06 <HAL_I2C_Master_Receive+0x186>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d130      	bne.n	8001a06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f880 	bl	8001ab4 <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e04d      	b.n	8001a5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2bff      	cmp	r3, #255	; 0xff
 80019c6:	d90e      	bls.n	80019e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	8979      	ldrh	r1, [r7, #10]
 80019d6:	2300      	movs	r3, #0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f9f6 	bl	8001dd0 <I2C_TransferConfig>
 80019e4:	e00f      	b.n	8001a06 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	8979      	ldrh	r1, [r7, #10]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f9e5 	bl	8001dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d19d      	bne.n	800194c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	6a39      	ldr	r1, [r7, #32]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f8cd 	bl	8001bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e01a      	b.n	8001a5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_I2C_Master_Receive+0x1e8>)
 8001a38:	400b      	ands	r3, r1
 8001a3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	80002400 	.word	0x80002400
 8001a68:	fe00e800 	.word	0xfe00e800

08001a6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d103      	bne.n	8001a8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d007      	beq.n	8001aa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	619a      	str	r2, [r3, #24]
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac4:	e022      	b.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001acc:	d01e      	beq.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ace:	f7ff fa7b 	bl	8000fc8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d302      	bcc.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d113      	bne.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f043 0220 	orr.w	r2, r3, #32
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e00f      	b.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4013      	ands	r3, r2
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d0cd      	beq.n	8001ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b40:	e02c      	b.n	8001b9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f8dc 	bl	8001d04 <I2C_IsAcknowledgeFailed>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e02a      	b.n	8001bac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d01e      	beq.n	8001b9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff fa33 	bl	8000fc8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d113      	bne.n	8001b9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e007      	b.n	8001bac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d1cb      	bne.n	8001b42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc0:	e028      	b.n	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f89c 	bl	8001d04 <I2C_IsAcknowledgeFailed>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e026      	b.n	8001c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7ff f9f7 	bl	8000fc8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d1cf      	bne.n	8001bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c38:	e055      	b.n	8001ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f860 	bl	8001d04 <I2C_IsAcknowledgeFailed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e053      	b.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d129      	bne.n	8001cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d105      	bne.n	8001c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e03f      	b.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e022      	b.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb0:	f7ff f98a 	bl	8000fc8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d302      	bcc.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10f      	bne.n	8001ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f043 0220 	orr.w	r2, r3, #32
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e007      	b.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d1a2      	bne.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	fe00e800 	.word	0xfe00e800

08001d04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d151      	bne.n	8001dc2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1e:	e022      	b.n	8001d66 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d26:	d01e      	beq.n	8001d66 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d28:	f7ff f94e 	bl	8000fc8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d302      	bcc.n	8001d3e <I2C_IsAcknowledgeFailed+0x3a>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d113      	bne.n	8001d66 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f043 0220 	orr.w	r2, r3, #32
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02e      	b.n	8001dc4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d1d5      	bne.n	8001d20 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2220      	movs	r2, #32
 8001d82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff fe71 	bl	8001a6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <I2C_IsAcknowledgeFailed+0xc8>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f043 0204 	orr.w	r2, r3, #4
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	fe00e800 	.word	0xfe00e800

08001dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	4613      	mov	r3, r2
 8001de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	0d5b      	lsrs	r3, r3, #21
 8001dec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <I2C_TransferConfig+0x58>)
 8001df2:	430b      	orrs	r3, r1
 8001df4:	43db      	mvns	r3, r3
 8001df6:	ea02 0103 	and.w	r1, r2, r3
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e00:	7a7b      	ldrb	r3, [r7, #9]
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	03ff63ff 	.word	0x03ff63ff

08001e2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d138      	bne.n	8001eb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e032      	b.n	8001eb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d139      	bne.n	8001f4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e033      	b.n	8001f4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2224      	movs	r2, #36	; 0x24
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40007000 	.word	0x40007000

08001f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f86:	d130      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f94:	d038      	beq.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2232      	movs	r2, #50	; 0x32
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0c9b      	lsrs	r3, r3, #18
 8001fb8:	3301      	adds	r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbc:	e002      	b.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd0:	d102      	bne.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f2      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe4:	d110      	bne.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e00f      	b.n	800200a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d007      	beq.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002000:	4a05      	ldr	r2, [pc, #20]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40007000 	.word	0x40007000
 800201c:	20000000 	.word	0x20000000
 8002020:	431bde83 	.word	0x431bde83

08002024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e3d4      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002036:	4ba1      	ldr	r3, [pc, #644]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002040:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80e4 	beq.w	8002220 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_RCC_OscConfig+0x4a>
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	f040 808b 	bne.w	800217c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 8087 	bne.w	800217c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800206e:	4b93      	ldr	r3, [pc, #588]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_RCC_OscConfig+0x62>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e3ac      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1a      	ldr	r2, [r3, #32]
 800208a:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_RCC_OscConfig+0x7c>
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800209e:	e005      	b.n	80020ac <HAL_RCC_OscConfig+0x88>
 80020a0:	4b86      	ldr	r3, [pc, #536]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d223      	bcs.n	80020f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fd41 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e38d      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c4:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7c      	ldr	r2, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4977      	ldr	r1, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	4972      	ldr	r1, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
 80020f6:	e025      	b.n	8002144 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f8:	4b70      	ldr	r3, [pc, #448]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6f      	ldr	r2, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	496a      	ldr	r1, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002116:	4b69      	ldr	r3, [pc, #420]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	4965      	ldr	r1, [pc, #404]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fd01 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e34d      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002144:	f000 fc36 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	495a      	ldr	r1, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x29c>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <HAL_RCC_OscConfig+0x2a0>)
 8002162:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_RCC_OscConfig+0x2a4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fedd 	bl	8000f28 <HAL_InitTick>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d052      	beq.n	800221e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	e331      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d032      	beq.n	80021ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002184:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002190:	f7fe ff1a 	bl	8000fc8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002198:	f7fe ff16 	bl	8000fc8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e31a      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021aa:	4b44      	ldr	r3, [pc, #272]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a40      	ldr	r2, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	493b      	ldr	r1, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	4936      	ldr	r1, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e01a      	b.n	8002220 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a33      	ldr	r2, [pc, #204]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fee7 	bl	8000fc8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021fe:	f7fe fee3 	bl	8000fc8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e2e7      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x1da>
 800221c:	e000      	b.n	8002220 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800221e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d074      	beq.n	8002316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b08      	cmp	r3, #8
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x21a>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d10e      	bne.n	8002256 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d064      	beq.n	8002314 <HAL_RCC_OscConfig+0x2f0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d160      	bne.n	8002314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e2c4      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x24a>
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e01d      	b.n	80022aa <HAL_RCC_OscConfig+0x286>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x26e>
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 800227e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x286>
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x298>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01c      	beq.n	80022ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fe89 	bl	8000fc8 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b8:	e011      	b.n	80022de <HAL_RCC_OscConfig+0x2ba>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08004e30 	.word	0x08004e30
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fe7c 	bl	8000fc8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e280      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	4baf      	ldr	r3, [pc, #700]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x2a8>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fe6c 	bl	8000fc8 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe fe68 	bl	8000fc8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e26c      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002306:	4ba5      	ldr	r3, [pc, #660]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2d0>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d060      	beq.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x310>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d119      	bne.n	8002362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d116      	bne.n	8002362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002334:	4b99      	ldr	r3, [pc, #612]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_OscConfig+0x328>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e249      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b93      	ldr	r3, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	4990      	ldr	r1, [pc, #576]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002360:	e040      	b.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d023      	beq.n	80023b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a8b      	ldr	r2, [pc, #556]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe fe27 	bl	8000fc8 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237e:	f7fe fe23 	bl	8000fc8 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e227      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002390:	4b82      	ldr	r3, [pc, #520]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	497c      	ldr	r1, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
 80023b0:	e018      	b.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b7a      	ldr	r3, [pc, #488]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a79      	ldr	r2, [pc, #484]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80023b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fe03 	bl	8000fc8 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fdff 	bl	8000fc8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e203      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d8:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03c      	beq.n	800246a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	4a67      	ldr	r2, [pc, #412]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fdde 	bl	8000fc8 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fdda 	bl	8000fc8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1de      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002422:	4b5e      	ldr	r3, [pc, #376]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ef      	beq.n	8002410 <HAL_RCC_OscConfig+0x3ec>
 8002430:	e01b      	b.n	800246a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002432:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fdc1 	bl	8000fc8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fdbd 	bl	8000fc8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1c1      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80a6 	beq.w	80025c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800247c:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002492:	6593      	str	r3, [r2, #88]	; 0x58
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_RCC_OscConfig+0x57c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d118      	bne.n	80024e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x57c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_RCC_OscConfig+0x57c>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024bc:	f7fe fd84 	bl	8000fc8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7fe fd80 	bl	8000fc8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e184      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_RCC_OscConfig+0x57c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x4d8>
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	4a2a      	ldr	r2, [pc, #168]	; (800259c <HAL_RCC_OscConfig+0x578>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fa:	e024      	b.n	8002546 <HAL_RCC_OscConfig+0x522>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d110      	bne.n	8002526 <HAL_RCC_OscConfig+0x502>
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a24      	ldr	r2, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a20      	ldr	r2, [pc, #128]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002524:	e00f      	b.n	8002546 <HAL_RCC_OscConfig+0x522>
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_OscConfig+0x578>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fd3b 	bl	8000fc8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fd37 	bl	8000fc8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e139      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x578>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ed      	beq.n	8002556 <HAL_RCC_OscConfig+0x532>
 800257a:	e01a      	b.n	80025b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7fe fd24 	bl	8000fc8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002582:	e00f      	b.n	80025a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe fd20 	bl	8000fc8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d906      	bls.n	80025a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e122      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e8      	bne.n	8002584 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b2:	7ffb      	ldrb	r3, [r7, #31]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b8b      	ldr	r3, [pc, #556]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	4a8a      	ldr	r2, [pc, #552]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8108 	beq.w	80027de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	f040 80d0 	bne.w	8002778 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025d8:	4b83      	ldr	r3, [pc, #524]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d130      	bne.n	800264e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	3b01      	subs	r3, #1
 80025f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d127      	bne.n	800264e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002608:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d11f      	bne.n	800264e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002618:	2a07      	cmp	r2, #7
 800261a:	bf14      	ite	ne
 800261c:	2201      	movne	r2, #1
 800261e:	2200      	moveq	r2, #0
 8002620:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002622:	4293      	cmp	r3, r2
 8002624:	d113      	bne.n	800264e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	3b01      	subs	r3, #1
 8002634:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d109      	bne.n	800264e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	3b01      	subs	r3, #1
 8002648:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d06e      	beq.n	800272c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	d069      	beq.n	8002728 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b7      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002670:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800267c:	f7fe fca4 	bl	8000fc8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fca0 	bl	8000fc8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0a4      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002696:	4b54      	ldr	r3, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x7c8>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026b2:	3a01      	subs	r2, #1
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026bc:	0212      	lsls	r2, r2, #8
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c4:	0852      	lsrs	r2, r2, #1
 80026c6:	3a01      	subs	r2, #1
 80026c8:	0552      	lsls	r2, r2, #21
 80026ca:	4311      	orrs	r1, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d0:	0852      	lsrs	r2, r2, #1
 80026d2:	3a01      	subs	r2, #1
 80026d4:	0652      	lsls	r2, r2, #25
 80026d6:	4311      	orrs	r1, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026dc:	0912      	lsrs	r2, r2, #4
 80026de:	0452      	lsls	r2, r2, #17
 80026e0:	430a      	orrs	r2, r1
 80026e2:	4941      	ldr	r1, [pc, #260]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026e8:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f4:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002700:	f7fe fc62 	bl	8000fc8 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fc5e 	bl	8000fc8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e062      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002726:	e05a      	b.n	80027de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e059      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d152      	bne.n	80027de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002742:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800274a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002750:	f7fe fc3a 	bl	8000fc8 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc36 	bl	8000fc8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e03a      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x734>
 8002776:	e032      	b.n	80027de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d02d      	beq.n	80027da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002788:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 800279c:	f023 0303 	bic.w	r3, r3, #3
 80027a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80027a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fc09 	bl	8000fc8 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe fc05 	bl	8000fc8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e009      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_OscConfig+0x7c4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x796>
 80027d8:	e001      	b.n	80027de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	f99d808c 	.word	0xf99d808c

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0c8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d910      	bls.n	8002834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0207 	bic.w	r2, r3, #7
 800281a:	4961      	ldr	r1, [pc, #388]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0b0      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d04c      	beq.n	80028da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d107      	bne.n	8002858 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002848:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d121      	bne.n	8002898 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e09e      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d107      	bne.n	8002870 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d115      	bne.n	8002898 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e092      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002878:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e086      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e07e      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 0203 	bic.w	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	493f      	ldr	r1, [pc, #252]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028aa:	f7fe fb8d 	bl	8000fc8 <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b2:	f7fe fb89 	bl	8000fc8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e066      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c8:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 020c 	and.w	r2, r3, #12
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d1eb      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	492c      	ldr	r1, [pc, #176]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d210      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4924      	ldr	r1, [pc, #144]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e036      	b.n	8002996 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4918      	ldr	r1, [pc, #96]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4910      	ldr	r1, [pc, #64]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002966:	f000 f825 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490c      	ldr	r1, [pc, #48]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe facc 	bl	8000f28 <HAL_InitTick>
 8002990:	4603      	mov	r3, r0
 8002992:	72fb      	strb	r3, [r7, #11]

  return status;
 8002994:	7afb      	ldrb	r3, [r7, #11]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08004e30 	.word	0x08004e30
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d11e      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e005      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e004      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d134      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d003      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xac>
 8002a58:	e005      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5c:	617b      	str	r3, [r7, #20]
      break;
 8002a5e:	e005      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a62:	617b      	str	r3, [r7, #20]
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	617b      	str	r3, [r7, #20]
      break;
 8002a6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	fb02 f203 	mul.w	r2, r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	0e5b      	lsrs	r3, r3, #25
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aac:	69bb      	ldr	r3, [r7, #24]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08004e48 	.word	0x08004e48
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08004e40 	.word	0x08004e40

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b14:	f7ff ffda 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4904      	ldr	r1, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08004e40 	.word	0x08004e40

08002b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b54:	f7ff fa02 	bl	8001f5c <HAL_PWREx_GetVoltageRange>
 8002b58:	6178      	str	r0, [r7, #20]
 8002b5a:	e014      	b.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b74:	f7ff f9f2 	bl	8001f5c <HAL_PWREx_GetVoltageRange>
 8002b78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d10b      	bne.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d919      	bls.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2ba0      	cmp	r3, #160	; 0xa0
 8002b98:	d902      	bls.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e013      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e010      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d902      	bls.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bac:	2303      	movs	r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e00a      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d102      	bne.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e004      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d101      	bne.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0207 	bic.w	r2, r3, #7
 8002bd0:	4909      	ldr	r1, [pc, #36]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40022000 	.word	0x40022000

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c04:	2300      	movs	r3, #0
 8002c06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d041      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c20:	d02a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c26:	d824      	bhi.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c2c:	d008      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c32:	d81e      	bhi.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3c:	d010      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c3e:	e018      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c40:	4b86      	ldr	r3, [pc, #536]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a85      	ldr	r2, [pc, #532]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c4c:	e015      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fabb 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5e:	e00c      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3320      	adds	r3, #32
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fba6 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c70:	e003      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	74fb      	strb	r3, [r7, #19]
      break;
 8002c76:	e000      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c80:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8e:	4973      	ldr	r1, [pc, #460]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c96:	e001      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d041      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cb0:	d02a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cb6:	d824      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cc2:	d81e      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cce:	e018      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cd0:	4b62      	ldr	r3, [pc, #392]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a61      	ldr	r2, [pc, #388]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cdc:	e015      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fa73 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cee:	e00c      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3320      	adds	r3, #32
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fb5e 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	74fb      	strb	r3, [r7, #19]
      break;
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d10:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d1e:	494f      	ldr	r1, [pc, #316]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d26:	e001      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80a0 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d60:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe f924 	bl	8000fc8 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d82:	e009      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d84:	f7fe f920 	bl	8000fc8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	74fb      	strb	r3, [r7, #19]
        break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ef      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d15c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002daa:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01f      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe f8df 	bl	8000fc8 <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe f8db 	bl	8000fc8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d902      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	74fb      	strb	r3, [r7, #19]
            break;
 8002e24:	e006      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ec      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4a:	4904      	ldr	r1, [pc, #16]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e68:	7c7b      	ldrb	r3, [r7, #17]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	4a9d      	ldr	r2, [pc, #628]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e86:	4b98      	ldr	r3, [pc, #608]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f023 0203 	bic.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	4994      	ldr	r1, [pc, #592]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ea8:	4b8f      	ldr	r3, [pc, #572]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 020c 	bic.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	498c      	ldr	r1, [pc, #560]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eca:	4b87      	ldr	r3, [pc, #540]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4983      	ldr	r1, [pc, #524]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eec:	4b7e      	ldr	r3, [pc, #504]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	497b      	ldr	r1, [pc, #492]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	4972      	ldr	r1, [pc, #456]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f30:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	496a      	ldr	r1, [pc, #424]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	4961      	ldr	r1, [pc, #388]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f74:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f82:	4959      	ldr	r1, [pc, #356]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f96:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	4950      	ldr	r1, [pc, #320]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fb8:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	4948      	ldr	r1, [pc, #288]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	493f      	ldr	r1, [pc, #252]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d028      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300a:	4937      	ldr	r1, [pc, #220]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800301a:	d106      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a31      	ldr	r2, [pc, #196]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
 8003028:	e011      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003032:	d10c      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f8c8 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d028      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	491f      	ldr	r1, [pc, #124]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003078:	d106      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a1a      	ldr	r2, [pc, #104]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003084:	60d3      	str	r3, [r2, #12]
 8003086:	e011      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003090:	d10c      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	2101      	movs	r1, #1
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f899 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d02b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d6:	d109      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a02      	ldr	r2, [pc, #8]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
 80030e4:	e014      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f867 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312a:	4928      	ldr	r1, [pc, #160]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800313a:	d10d      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f844 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	74bb      	strb	r3, [r7, #18]
 8003156:	e011      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003160:	d10c      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3320      	adds	r3, #32
 8003166:	2102      	movs	r1, #2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f925 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003196:	490d      	ldr	r1, [pc, #52]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	4904      	ldr	r1, [pc, #16]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000

080031d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031ea:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
       ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003202:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
       ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d047      	beq.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e044      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d018      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x86>
 8003224:	2b03      	cmp	r3, #3
 8003226:	d825      	bhi.n	8003274 <RCCEx_PLLSAI1_Config+0xa4>
 8003228:	2b01      	cmp	r3, #1
 800322a:	d002      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x62>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d009      	beq.n	8003244 <RCCEx_PLLSAI1_Config+0x74>
 8003230:	e020      	b.n	8003274 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003232:	4b60      	ldr	r3, [pc, #384]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11d      	bne.n	800327a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003242:	e01a      	b.n	800327a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003244:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e013      	b.n	800327e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003256:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003272:	e006      	b.n	8003282 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e004      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003282:	bf00      	nop
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328a:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	430b      	orrs	r3, r1
 80032a0:	4944      	ldr	r1, [pc, #272]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d17d      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032ac:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fd fe86 	bl	8000fc8 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032be:	e009      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c0:	f7fd fe82 	bl	8000fc8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	73fb      	strb	r3, [r7, #15]
        break;
 80032d2:	e005      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032d4:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ef      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d160      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ec:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	0912      	lsrs	r2, r2, #4
 8003304:	0452      	lsls	r2, r2, #17
 8003306:	430a      	orrs	r2, r1
 8003308:	492a      	ldr	r1, [pc, #168]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	610b      	str	r3, [r1, #16]
 800330e:	e027      	b.n	8003360 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d112      	bne.n	800333c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800331e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	0211      	lsls	r1, r2, #8
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6912      	ldr	r2, [r2, #16]
 800332c:	0852      	lsrs	r2, r2, #1
 800332e:	3a01      	subs	r2, #1
 8003330:	0552      	lsls	r2, r2, #21
 8003332:	430a      	orrs	r2, r1
 8003334:	491f      	ldr	r1, [pc, #124]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]
 800333a:	e011      	b.n	8003360 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003344:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6952      	ldr	r2, [r2, #20]
 8003352:	0852      	lsrs	r2, r2, #1
 8003354:	3a01      	subs	r2, #1
 8003356:	0652      	lsls	r2, r2, #25
 8003358:	430a      	orrs	r2, r1
 800335a:	4916      	ldr	r1, [pc, #88]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800336a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fd fe2c 	bl	8000fc8 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fd fe28 	bl	8000fc8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
          break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ef      	beq.n	8003374 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033c6:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d10d      	bne.n	80033fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
       ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
       ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d047      	beq.n	800348e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e044      	b.n	800348e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d018      	beq.n	800343e <RCCEx_PLLSAI2_Config+0x86>
 800340c:	2b03      	cmp	r3, #3
 800340e:	d825      	bhi.n	800345c <RCCEx_PLLSAI2_Config+0xa4>
 8003410:	2b01      	cmp	r3, #1
 8003412:	d002      	beq.n	800341a <RCCEx_PLLSAI2_Config+0x62>
 8003414:	2b02      	cmp	r3, #2
 8003416:	d009      	beq.n	800342c <RCCEx_PLLSAI2_Config+0x74>
 8003418:	e020      	b.n	800345c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800341a:	4b55      	ldr	r3, [pc, #340]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11d      	bne.n	8003462 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342a:	e01a      	b.n	8003462 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343c:	e013      	b.n	8003466 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800343e:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800345a:	e006      	b.n	800346a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      break;
 8003460:	e004      	b.n	800346c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800346a:	bf00      	nop
    }

    if(status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003472:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	430b      	orrs	r3, r1
 8003488:	4939      	ldr	r1, [pc, #228]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d167      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003494:	4b36      	ldr	r3, [pc, #216]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fd fd92 	bl	8000fc8 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034a6:	e009      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034a8:	f7fd fd8e 	bl	8000fc8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ba:	e005      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034bc:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ef      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d14a      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d111      	bne.n	80034f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034d4:	4b26      	ldr	r3, [pc, #152]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	0211      	lsls	r1, r2, #8
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68d2      	ldr	r2, [r2, #12]
 80034ea:	0912      	lsrs	r2, r2, #4
 80034ec:	0452      	lsls	r2, r2, #17
 80034ee:	430a      	orrs	r2, r1
 80034f0:	491f      	ldr	r1, [pc, #124]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	614b      	str	r3, [r1, #20]
 80034f6:	e011      	b.n	800351c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003500:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	0211      	lsls	r1, r2, #8
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	0852      	lsrs	r2, r2, #1
 8003510:	3a01      	subs	r2, #1
 8003512:	0652      	lsls	r2, r2, #25
 8003514:	430a      	orrs	r2, r1
 8003516:	4916      	ldr	r1, [pc, #88]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a13      	ldr	r2, [pc, #76]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003526:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fd fd4e 	bl	8000fc8 <HAL_GetTick>
 800352c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800352e:	e009      	b.n	8003544 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003530:	f7fd fd4a 	bl	8000fc8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	73fb      	strb	r3, [r7, #15]
          break;
 8003542:	e005      	b.n	8003550 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ef      	beq.n	8003530 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	4904      	ldr	r1, [pc, #16]	; (8003570 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e040      	b.n	8003608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb3a 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f82c 	bl	8003610 <UART_SetConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e022      	b.n	8003608 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 faaa 	bl	8003b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fb31 	bl	8003c68 <UART_CheckIdleState>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4bad      	ldr	r3, [pc, #692]	; (80038f0 <UART_SetConfig+0x2e0>)
 800363c:	4013      	ands	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4aa2      	ldr	r2, [pc, #648]	; (80038f4 <UART_SetConfig+0x2e4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	4313      	orrs	r3, r2
 8003676:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a99      	ldr	r2, [pc, #612]	; (80038f8 <UART_SetConfig+0x2e8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d121      	bne.n	80036da <UART_SetConfig+0xca>
 8003696:	4b99      	ldr	r3, [pc, #612]	; (80038fc <UART_SetConfig+0x2ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d817      	bhi.n	80036d4 <UART_SetConfig+0xc4>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0x9c>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036c3 	.word	0x080036c3
 80036b8:	080036cf 	.word	0x080036cf
 80036bc:	2301      	movs	r3, #1
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0e7      	b.n	8003892 <UART_SetConfig+0x282>
 80036c2:	2302      	movs	r3, #2
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e0e4      	b.n	8003892 <UART_SetConfig+0x282>
 80036c8:	2304      	movs	r3, #4
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e0e1      	b.n	8003892 <UART_SetConfig+0x282>
 80036ce:	2308      	movs	r3, #8
 80036d0:	76fb      	strb	r3, [r7, #27]
 80036d2:	e0de      	b.n	8003892 <UART_SetConfig+0x282>
 80036d4:	2310      	movs	r3, #16
 80036d6:	76fb      	strb	r3, [r7, #27]
 80036d8:	e0db      	b.n	8003892 <UART_SetConfig+0x282>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a88      	ldr	r2, [pc, #544]	; (8003900 <UART_SetConfig+0x2f0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d132      	bne.n	800374a <UART_SetConfig+0x13a>
 80036e4:	4b85      	ldr	r3, [pc, #532]	; (80038fc <UART_SetConfig+0x2ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d828      	bhi.n	8003744 <UART_SetConfig+0x134>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0xe8>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003739 	.word	0x08003739
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	08003733 	.word	0x08003733
 800371c:	08003745 	.word	0x08003745
 8003720:	08003745 	.word	0x08003745
 8003724:	08003745 	.word	0x08003745
 8003728:	0800373f 	.word	0x0800373f
 800372c:	2300      	movs	r3, #0
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e0af      	b.n	8003892 <UART_SetConfig+0x282>
 8003732:	2302      	movs	r3, #2
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e0ac      	b.n	8003892 <UART_SetConfig+0x282>
 8003738:	2304      	movs	r3, #4
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e0a9      	b.n	8003892 <UART_SetConfig+0x282>
 800373e:	2308      	movs	r3, #8
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e0a6      	b.n	8003892 <UART_SetConfig+0x282>
 8003744:	2310      	movs	r3, #16
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e0a3      	b.n	8003892 <UART_SetConfig+0x282>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6d      	ldr	r2, [pc, #436]	; (8003904 <UART_SetConfig+0x2f4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0x186>
 8003754:	4b69      	ldr	r3, [pc, #420]	; (80038fc <UART_SetConfig+0x2ec>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800375e:	2b30      	cmp	r3, #48	; 0x30
 8003760:	d013      	beq.n	800378a <UART_SetConfig+0x17a>
 8003762:	2b30      	cmp	r3, #48	; 0x30
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x180>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0x16e>
 800376a:	2b20      	cmp	r3, #32
 800376c:	d810      	bhi.n	8003790 <UART_SetConfig+0x180>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x168>
 8003772:	2b10      	cmp	r3, #16
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x174>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x180>
 8003778:	2300      	movs	r3, #0
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e089      	b.n	8003892 <UART_SetConfig+0x282>
 800377e:	2302      	movs	r3, #2
 8003780:	76fb      	strb	r3, [r7, #27]
 8003782:	e086      	b.n	8003892 <UART_SetConfig+0x282>
 8003784:	2304      	movs	r3, #4
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e083      	b.n	8003892 <UART_SetConfig+0x282>
 800378a:	2308      	movs	r3, #8
 800378c:	76fb      	strb	r3, [r7, #27]
 800378e:	e080      	b.n	8003892 <UART_SetConfig+0x282>
 8003790:	2310      	movs	r3, #16
 8003792:	76fb      	strb	r3, [r7, #27]
 8003794:	e07d      	b.n	8003892 <UART_SetConfig+0x282>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <UART_SetConfig+0x2f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0x1d2>
 80037a0:	4b56      	ldr	r3, [pc, #344]	; (80038fc <UART_SetConfig+0x2ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037aa:	2bc0      	cmp	r3, #192	; 0xc0
 80037ac:	d013      	beq.n	80037d6 <UART_SetConfig+0x1c6>
 80037ae:	2bc0      	cmp	r3, #192	; 0xc0
 80037b0:	d814      	bhi.n	80037dc <UART_SetConfig+0x1cc>
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d009      	beq.n	80037ca <UART_SetConfig+0x1ba>
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d810      	bhi.n	80037dc <UART_SetConfig+0x1cc>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <UART_SetConfig+0x1b4>
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d006      	beq.n	80037d0 <UART_SetConfig+0x1c0>
 80037c2:	e00b      	b.n	80037dc <UART_SetConfig+0x1cc>
 80037c4:	2300      	movs	r3, #0
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e063      	b.n	8003892 <UART_SetConfig+0x282>
 80037ca:	2302      	movs	r3, #2
 80037cc:	76fb      	strb	r3, [r7, #27]
 80037ce:	e060      	b.n	8003892 <UART_SetConfig+0x282>
 80037d0:	2304      	movs	r3, #4
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e05d      	b.n	8003892 <UART_SetConfig+0x282>
 80037d6:	2308      	movs	r3, #8
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e05a      	b.n	8003892 <UART_SetConfig+0x282>
 80037dc:	2310      	movs	r3, #16
 80037de:	76fb      	strb	r3, [r7, #27]
 80037e0:	e057      	b.n	8003892 <UART_SetConfig+0x282>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a49      	ldr	r2, [pc, #292]	; (800390c <UART_SetConfig+0x2fc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d125      	bne.n	8003838 <UART_SetConfig+0x228>
 80037ec:	4b43      	ldr	r3, [pc, #268]	; (80038fc <UART_SetConfig+0x2ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fa:	d017      	beq.n	800382c <UART_SetConfig+0x21c>
 80037fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003800:	d817      	bhi.n	8003832 <UART_SetConfig+0x222>
 8003802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003806:	d00b      	beq.n	8003820 <UART_SetConfig+0x210>
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d811      	bhi.n	8003832 <UART_SetConfig+0x222>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <UART_SetConfig+0x20a>
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d006      	beq.n	8003826 <UART_SetConfig+0x216>
 8003818:	e00b      	b.n	8003832 <UART_SetConfig+0x222>
 800381a:	2300      	movs	r3, #0
 800381c:	76fb      	strb	r3, [r7, #27]
 800381e:	e038      	b.n	8003892 <UART_SetConfig+0x282>
 8003820:	2302      	movs	r3, #2
 8003822:	76fb      	strb	r3, [r7, #27]
 8003824:	e035      	b.n	8003892 <UART_SetConfig+0x282>
 8003826:	2304      	movs	r3, #4
 8003828:	76fb      	strb	r3, [r7, #27]
 800382a:	e032      	b.n	8003892 <UART_SetConfig+0x282>
 800382c:	2308      	movs	r3, #8
 800382e:	76fb      	strb	r3, [r7, #27]
 8003830:	e02f      	b.n	8003892 <UART_SetConfig+0x282>
 8003832:	2310      	movs	r3, #16
 8003834:	76fb      	strb	r3, [r7, #27]
 8003836:	e02c      	b.n	8003892 <UART_SetConfig+0x282>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <UART_SetConfig+0x2e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d125      	bne.n	800388e <UART_SetConfig+0x27e>
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <UART_SetConfig+0x2ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800384c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003850:	d017      	beq.n	8003882 <UART_SetConfig+0x272>
 8003852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003856:	d817      	bhi.n	8003888 <UART_SetConfig+0x278>
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385c:	d00b      	beq.n	8003876 <UART_SetConfig+0x266>
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003862:	d811      	bhi.n	8003888 <UART_SetConfig+0x278>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <UART_SetConfig+0x260>
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d006      	beq.n	800387c <UART_SetConfig+0x26c>
 800386e:	e00b      	b.n	8003888 <UART_SetConfig+0x278>
 8003870:	2300      	movs	r3, #0
 8003872:	76fb      	strb	r3, [r7, #27]
 8003874:	e00d      	b.n	8003892 <UART_SetConfig+0x282>
 8003876:	2302      	movs	r3, #2
 8003878:	76fb      	strb	r3, [r7, #27]
 800387a:	e00a      	b.n	8003892 <UART_SetConfig+0x282>
 800387c:	2304      	movs	r3, #4
 800387e:	76fb      	strb	r3, [r7, #27]
 8003880:	e007      	b.n	8003892 <UART_SetConfig+0x282>
 8003882:	2308      	movs	r3, #8
 8003884:	76fb      	strb	r3, [r7, #27]
 8003886:	e004      	b.n	8003892 <UART_SetConfig+0x282>
 8003888:	2310      	movs	r3, #16
 800388a:	76fb      	strb	r3, [r7, #27]
 800388c:	e001      	b.n	8003892 <UART_SetConfig+0x282>
 800388e:	2310      	movs	r3, #16
 8003890:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <UART_SetConfig+0x2e4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	f040 8087 	bne.w	80039ac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800389e:	7efb      	ldrb	r3, [r7, #27]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d837      	bhi.n	8003914 <UART_SetConfig+0x304>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <UART_SetConfig+0x29c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	08003915 	.word	0x08003915
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	08003915 	.word	0x08003915
 80038bc:	080038df 	.word	0x080038df
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003915 	.word	0x08003915
 80038cc:	080038e7 	.word	0x080038e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d0:	f7ff f908 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 80038d4:	6178      	str	r0, [r7, #20]
        break;
 80038d6:	e022      	b.n	800391e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <UART_SetConfig+0x300>)
 80038da:	617b      	str	r3, [r7, #20]
        break;
 80038dc:	e01f      	b.n	800391e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038de:	f7ff f869 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 80038e2:	6178      	str	r0, [r7, #20]
        break;
 80038e4:	e01b      	b.n	800391e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ea:	617b      	str	r3, [r7, #20]
        break;
 80038ec:	e017      	b.n	800391e <UART_SetConfig+0x30e>
 80038ee:	bf00      	nop
 80038f0:	efff69f3 	.word	0xefff69f3
 80038f4:	40008000 	.word	0x40008000
 80038f8:	40013800 	.word	0x40013800
 80038fc:	40021000 	.word	0x40021000
 8003900:	40004400 	.word	0x40004400
 8003904:	40004800 	.word	0x40004800
 8003908:	40004c00 	.word	0x40004c00
 800390c:	40005000 	.word	0x40005000
 8003910:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	76bb      	strb	r3, [r7, #26]
        break;
 800391c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80f1 	beq.w	8003b08 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	429a      	cmp	r2, r3
 8003934:	d305      	bcc.n	8003942 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	429a      	cmp	r2, r3
 8003940:	d902      	bls.n	8003948 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	76bb      	strb	r3, [r7, #26]
 8003946:	e0df      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4618      	mov	r0, r3
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	020b      	lsls	r3, r1, #8
 800395a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800395e:	0202      	lsls	r2, r0, #8
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6849      	ldr	r1, [r1, #4]
 8003964:	0849      	lsrs	r1, r1, #1
 8003966:	4608      	mov	r0, r1
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	1814      	adds	r4, r2, r0
 800396e:	eb43 0501 	adc.w	r5, r3, r1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fc fc76 	bl	8000270 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003992:	d308      	bcc.n	80039a6 <UART_SetConfig+0x396>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d204      	bcs.n	80039a6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e0b0      	b.n	8003b08 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	76bb      	strb	r3, [r7, #26]
 80039aa:	e0ad      	b.n	8003b08 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b4:	d15c      	bne.n	8003a70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80039b6:	7efb      	ldrb	r3, [r7, #27]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d828      	bhi.n	8003a0e <UART_SetConfig+0x3fe>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0x3b4>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	08003a0f 	.word	0x08003a0f
 80039d4:	080039ff 	.word	0x080039ff
 80039d8:	08003a0f 	.word	0x08003a0f
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a0f 	.word	0x08003a0f
 80039e4:	08003a07 	.word	0x08003a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e8:	f7ff f87c 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 80039ec:	6178      	str	r0, [r7, #20]
        break;
 80039ee:	e013      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7ff f88e 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80039f4:	6178      	str	r0, [r7, #20]
        break;
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f8:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <UART_SetConfig+0x510>)
 80039fa:	617b      	str	r3, [r7, #20]
        break;
 80039fc:	e00c      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fe:	f7fe ffd9 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003a02:	6178      	str	r0, [r7, #20]
        break;
 8003a04:	e008      	b.n	8003a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	617b      	str	r3, [r7, #20]
        break;
 8003a0c:	e004      	b.n	8003a18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	76bb      	strb	r3, [r7, #26]
        break;
 8003a16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d074      	beq.n	8003b08 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d916      	bls.n	8003a6a <UART_SetConfig+0x45a>
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a42:	d212      	bcs.n	8003a6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	89fa      	ldrh	r2, [r7, #14]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e04e      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	76bb      	strb	r3, [r7, #26]
 8003a6e:	e04b      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a70:	7efb      	ldrb	r3, [r7, #27]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d827      	bhi.n	8003ac6 <UART_SetConfig+0x4b6>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x46c>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ac7 	.word	0x08003ac7
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003ac7 	.word	0x08003ac7
 8003a98:	08003ac7 	.word	0x08003ac7
 8003a9c:	08003abf 	.word	0x08003abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7ff f820 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	6178      	str	r0, [r7, #20]
        break;
 8003aa6:	e013      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa8:	f7ff f832 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003aac:	6178      	str	r0, [r7, #20]
        break;
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <UART_SetConfig+0x510>)
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e00c      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab6:	f7fe ff7d 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003aba:	6178      	str	r0, [r7, #20]
        break;
 8003abc:	e008      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac2:	617b      	str	r3, [r7, #20]
        break;
 8003ac4:	e004      	b.n	8003ad0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	76bb      	strb	r3, [r7, #26]
        break;
 8003ace:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085a      	lsrs	r2, r3, #1
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	441a      	add	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	d908      	bls.n	8003b04 <UART_SetConfig+0x4f4>
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d204      	bcs.n	8003b04 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e001      	b.n	8003b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b14:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d10a      	bne.n	8003c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c78:	f7fd f9a6 	bl	8000fc8 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10e      	bne.n	8003caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f82d 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e023      	b.n	8003cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d10e      	bne.n	8003cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f817 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00d      	b.n	8003cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	e05e      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d12:	d05a      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fd f958 	bl	8000fc8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11b      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e043      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02c      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d124      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e00f      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d091      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <__errno>:
 8003df4:	4b01      	ldr	r3, [pc, #4]	; (8003dfc <__errno+0x8>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <__libc_init_array>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4d0d      	ldr	r5, [pc, #52]	; (8003e38 <__libc_init_array+0x38>)
 8003e04:	4c0d      	ldr	r4, [pc, #52]	; (8003e3c <__libc_init_array+0x3c>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	42a6      	cmp	r6, r4
 8003e0e:	d109      	bne.n	8003e24 <__libc_init_array+0x24>
 8003e10:	4d0b      	ldr	r5, [pc, #44]	; (8003e40 <__libc_init_array+0x40>)
 8003e12:	4c0c      	ldr	r4, [pc, #48]	; (8003e44 <__libc_init_array+0x44>)
 8003e14:	f000 ffec 	bl	8004df0 <_init>
 8003e18:	1b64      	subs	r4, r4, r5
 8003e1a:	10a4      	asrs	r4, r4, #2
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	42a6      	cmp	r6, r4
 8003e20:	d105      	bne.n	8003e2e <__libc_init_array+0x2e>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e28:	4798      	blx	r3
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7ee      	b.n	8003e0c <__libc_init_array+0xc>
 8003e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e32:	4798      	blx	r3
 8003e34:	3601      	adds	r6, #1
 8003e36:	e7f2      	b.n	8003e1e <__libc_init_array+0x1e>
 8003e38:	08004f18 	.word	0x08004f18
 8003e3c:	08004f18 	.word	0x08004f18
 8003e40:	08004f18 	.word	0x08004f18
 8003e44:	08004f1c 	.word	0x08004f1c

08003e48 <memset>:
 8003e48:	4402      	add	r2, r0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <iprintf>:
 8003e58:	b40f      	push	{r0, r1, r2, r3}
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <iprintf+0x2c>)
 8003e5c:	b513      	push	{r0, r1, r4, lr}
 8003e5e:	681c      	ldr	r4, [r3, #0]
 8003e60:	b124      	cbz	r4, 8003e6c <iprintf+0x14>
 8003e62:	69a3      	ldr	r3, [r4, #24]
 8003e64:	b913      	cbnz	r3, 8003e6c <iprintf+0x14>
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 fa5e 	bl	8004328 <__sinit>
 8003e6c:	ab05      	add	r3, sp, #20
 8003e6e:	9a04      	ldr	r2, [sp, #16]
 8003e70:	68a1      	ldr	r1, [r4, #8]
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 fc2f 	bl	80046d8 <_vfiprintf_r>
 8003e7a:	b002      	add	sp, #8
 8003e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e80:	b004      	add	sp, #16
 8003e82:	4770      	bx	lr
 8003e84:	2000000c 	.word	0x2000000c

08003e88 <_puts_r>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	460e      	mov	r6, r1
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	b118      	cbz	r0, 8003e98 <_puts_r+0x10>
 8003e90:	6983      	ldr	r3, [r0, #24]
 8003e92:	b90b      	cbnz	r3, 8003e98 <_puts_r+0x10>
 8003e94:	f000 fa48 	bl	8004328 <__sinit>
 8003e98:	69ab      	ldr	r3, [r5, #24]
 8003e9a:	68ac      	ldr	r4, [r5, #8]
 8003e9c:	b913      	cbnz	r3, 8003ea4 <_puts_r+0x1c>
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 fa42 	bl	8004328 <__sinit>
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	; (8003f58 <_puts_r+0xd0>)
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d120      	bne.n	8003eec <_puts_r+0x64>
 8003eaa:	686c      	ldr	r4, [r5, #4]
 8003eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eae:	07db      	lsls	r3, r3, #31
 8003eb0:	d405      	bmi.n	8003ebe <_puts_r+0x36>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	0598      	lsls	r0, r3, #22
 8003eb6:	d402      	bmi.n	8003ebe <_puts_r+0x36>
 8003eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eba:	f000 fad3 	bl	8004464 <__retarget_lock_acquire_recursive>
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	0719      	lsls	r1, r3, #28
 8003ec2:	d51d      	bpl.n	8003f00 <_puts_r+0x78>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	b1db      	cbz	r3, 8003f00 <_puts_r+0x78>
 8003ec8:	3e01      	subs	r6, #1
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	60a3      	str	r3, [r4, #8]
 8003ed4:	bb39      	cbnz	r1, 8003f26 <_puts_r+0x9e>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da38      	bge.n	8003f4c <_puts_r+0xc4>
 8003eda:	4622      	mov	r2, r4
 8003edc:	210a      	movs	r1, #10
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f000 f848 	bl	8003f74 <__swbuf_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d011      	beq.n	8003f0c <_puts_r+0x84>
 8003ee8:	250a      	movs	r5, #10
 8003eea:	e011      	b.n	8003f10 <_puts_r+0x88>
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <_puts_r+0xd4>)
 8003eee:	429c      	cmp	r4, r3
 8003ef0:	d101      	bne.n	8003ef6 <_puts_r+0x6e>
 8003ef2:	68ac      	ldr	r4, [r5, #8]
 8003ef4:	e7da      	b.n	8003eac <_puts_r+0x24>
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <_puts_r+0xd8>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	bf08      	it	eq
 8003efc:	68ec      	ldreq	r4, [r5, #12]
 8003efe:	e7d5      	b.n	8003eac <_puts_r+0x24>
 8003f00:	4621      	mov	r1, r4
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 f888 	bl	8004018 <__swsetup_r>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d0dd      	beq.n	8003ec8 <_puts_r+0x40>
 8003f0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f12:	07da      	lsls	r2, r3, #31
 8003f14:	d405      	bmi.n	8003f22 <_puts_r+0x9a>
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	059b      	lsls	r3, r3, #22
 8003f1a:	d402      	bmi.n	8003f22 <_puts_r+0x9a>
 8003f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f1e:	f000 faa2 	bl	8004466 <__retarget_lock_release_recursive>
 8003f22:	4628      	mov	r0, r5
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da04      	bge.n	8003f34 <_puts_r+0xac>
 8003f2a:	69a2      	ldr	r2, [r4, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	dc06      	bgt.n	8003f3e <_puts_r+0xb6>
 8003f30:	290a      	cmp	r1, #10
 8003f32:	d004      	beq.n	8003f3e <_puts_r+0xb6>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	7019      	strb	r1, [r3, #0]
 8003f3c:	e7c5      	b.n	8003eca <_puts_r+0x42>
 8003f3e:	4622      	mov	r2, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f817 	bl	8003f74 <__swbuf_r>
 8003f46:	3001      	adds	r0, #1
 8003f48:	d1bf      	bne.n	8003eca <_puts_r+0x42>
 8003f4a:	e7df      	b.n	8003f0c <_puts_r+0x84>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	250a      	movs	r5, #10
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	6022      	str	r2, [r4, #0]
 8003f54:	701d      	strb	r5, [r3, #0]
 8003f56:	e7db      	b.n	8003f10 <_puts_r+0x88>
 8003f58:	08004e9c 	.word	0x08004e9c
 8003f5c:	08004ebc 	.word	0x08004ebc
 8003f60:	08004e7c 	.word	0x08004e7c

08003f64 <puts>:
 8003f64:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <puts+0xc>)
 8003f66:	4601      	mov	r1, r0
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	f7ff bf8d 	b.w	8003e88 <_puts_r>
 8003f6e:	bf00      	nop
 8003f70:	2000000c 	.word	0x2000000c

08003f74 <__swbuf_r>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	460e      	mov	r6, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	4605      	mov	r5, r0
 8003f7c:	b118      	cbz	r0, 8003f86 <__swbuf_r+0x12>
 8003f7e:	6983      	ldr	r3, [r0, #24]
 8003f80:	b90b      	cbnz	r3, 8003f86 <__swbuf_r+0x12>
 8003f82:	f000 f9d1 	bl	8004328 <__sinit>
 8003f86:	4b21      	ldr	r3, [pc, #132]	; (800400c <__swbuf_r+0x98>)
 8003f88:	429c      	cmp	r4, r3
 8003f8a:	d12b      	bne.n	8003fe4 <__swbuf_r+0x70>
 8003f8c:	686c      	ldr	r4, [r5, #4]
 8003f8e:	69a3      	ldr	r3, [r4, #24]
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	071a      	lsls	r2, r3, #28
 8003f96:	d52f      	bpl.n	8003ff8 <__swbuf_r+0x84>
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	b36b      	cbz	r3, 8003ff8 <__swbuf_r+0x84>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	6820      	ldr	r0, [r4, #0]
 8003fa0:	1ac0      	subs	r0, r0, r3
 8003fa2:	6963      	ldr	r3, [r4, #20]
 8003fa4:	b2f6      	uxtb	r6, r6
 8003fa6:	4283      	cmp	r3, r0
 8003fa8:	4637      	mov	r7, r6
 8003faa:	dc04      	bgt.n	8003fb6 <__swbuf_r+0x42>
 8003fac:	4621      	mov	r1, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f000 f926 	bl	8004200 <_fflush_r>
 8003fb4:	bb30      	cbnz	r0, 8004004 <__swbuf_r+0x90>
 8003fb6:	68a3      	ldr	r3, [r4, #8]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	60a3      	str	r3, [r4, #8]
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	6022      	str	r2, [r4, #0]
 8003fc2:	701e      	strb	r6, [r3, #0]
 8003fc4:	6963      	ldr	r3, [r4, #20]
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	4283      	cmp	r3, r0
 8003fca:	d004      	beq.n	8003fd6 <__swbuf_r+0x62>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	07db      	lsls	r3, r3, #31
 8003fd0:	d506      	bpl.n	8003fe0 <__swbuf_r+0x6c>
 8003fd2:	2e0a      	cmp	r6, #10
 8003fd4:	d104      	bne.n	8003fe0 <__swbuf_r+0x6c>
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 f911 	bl	8004200 <_fflush_r>
 8003fde:	b988      	cbnz	r0, 8004004 <__swbuf_r+0x90>
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <__swbuf_r+0x9c>)
 8003fe6:	429c      	cmp	r4, r3
 8003fe8:	d101      	bne.n	8003fee <__swbuf_r+0x7a>
 8003fea:	68ac      	ldr	r4, [r5, #8]
 8003fec:	e7cf      	b.n	8003f8e <__swbuf_r+0x1a>
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <__swbuf_r+0xa0>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	bf08      	it	eq
 8003ff4:	68ec      	ldreq	r4, [r5, #12]
 8003ff6:	e7ca      	b.n	8003f8e <__swbuf_r+0x1a>
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 f80c 	bl	8004018 <__swsetup_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	d0cb      	beq.n	8003f9c <__swbuf_r+0x28>
 8004004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004008:	e7ea      	b.n	8003fe0 <__swbuf_r+0x6c>
 800400a:	bf00      	nop
 800400c:	08004e9c 	.word	0x08004e9c
 8004010:	08004ebc 	.word	0x08004ebc
 8004014:	08004e7c 	.word	0x08004e7c

08004018 <__swsetup_r>:
 8004018:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <__swsetup_r+0xcc>)
 800401a:	b570      	push	{r4, r5, r6, lr}
 800401c:	681d      	ldr	r5, [r3, #0]
 800401e:	4606      	mov	r6, r0
 8004020:	460c      	mov	r4, r1
 8004022:	b125      	cbz	r5, 800402e <__swsetup_r+0x16>
 8004024:	69ab      	ldr	r3, [r5, #24]
 8004026:	b913      	cbnz	r3, 800402e <__swsetup_r+0x16>
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f97d 	bl	8004328 <__sinit>
 800402e:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <__swsetup_r+0xd0>)
 8004030:	429c      	cmp	r4, r3
 8004032:	d10f      	bne.n	8004054 <__swsetup_r+0x3c>
 8004034:	686c      	ldr	r4, [r5, #4]
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800403c:	0719      	lsls	r1, r3, #28
 800403e:	d42c      	bmi.n	800409a <__swsetup_r+0x82>
 8004040:	06dd      	lsls	r5, r3, #27
 8004042:	d411      	bmi.n	8004068 <__swsetup_r+0x50>
 8004044:	2309      	movs	r3, #9
 8004046:	6033      	str	r3, [r6, #0]
 8004048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004052:	e03e      	b.n	80040d2 <__swsetup_r+0xba>
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <__swsetup_r+0xd4>)
 8004056:	429c      	cmp	r4, r3
 8004058:	d101      	bne.n	800405e <__swsetup_r+0x46>
 800405a:	68ac      	ldr	r4, [r5, #8]
 800405c:	e7eb      	b.n	8004036 <__swsetup_r+0x1e>
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <__swsetup_r+0xd8>)
 8004060:	429c      	cmp	r4, r3
 8004062:	bf08      	it	eq
 8004064:	68ec      	ldreq	r4, [r5, #12]
 8004066:	e7e6      	b.n	8004036 <__swsetup_r+0x1e>
 8004068:	0758      	lsls	r0, r3, #29
 800406a:	d512      	bpl.n	8004092 <__swsetup_r+0x7a>
 800406c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800406e:	b141      	cbz	r1, 8004082 <__swsetup_r+0x6a>
 8004070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004074:	4299      	cmp	r1, r3
 8004076:	d002      	beq.n	800407e <__swsetup_r+0x66>
 8004078:	4630      	mov	r0, r6
 800407a:	f000 fa59 	bl	8004530 <_free_r>
 800407e:	2300      	movs	r3, #0
 8004080:	6363      	str	r3, [r4, #52]	; 0x34
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	6063      	str	r3, [r4, #4]
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	b94b      	cbnz	r3, 80040b2 <__swsetup_r+0x9a>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d003      	beq.n	80040b2 <__swsetup_r+0x9a>
 80040aa:	4621      	mov	r1, r4
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f9ff 	bl	80044b0 <__smakebuf_r>
 80040b2:	89a0      	ldrh	r0, [r4, #12]
 80040b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040b8:	f010 0301 	ands.w	r3, r0, #1
 80040bc:	d00a      	beq.n	80040d4 <__swsetup_r+0xbc>
 80040be:	2300      	movs	r3, #0
 80040c0:	60a3      	str	r3, [r4, #8]
 80040c2:	6963      	ldr	r3, [r4, #20]
 80040c4:	425b      	negs	r3, r3
 80040c6:	61a3      	str	r3, [r4, #24]
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	b943      	cbnz	r3, 80040de <__swsetup_r+0xc6>
 80040cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040d0:	d1ba      	bne.n	8004048 <__swsetup_r+0x30>
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	0781      	lsls	r1, r0, #30
 80040d6:	bf58      	it	pl
 80040d8:	6963      	ldrpl	r3, [r4, #20]
 80040da:	60a3      	str	r3, [r4, #8]
 80040dc:	e7f4      	b.n	80040c8 <__swsetup_r+0xb0>
 80040de:	2000      	movs	r0, #0
 80040e0:	e7f7      	b.n	80040d2 <__swsetup_r+0xba>
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	08004e9c 	.word	0x08004e9c
 80040ec:	08004ebc 	.word	0x08004ebc
 80040f0:	08004e7c 	.word	0x08004e7c

080040f4 <__sflush_r>:
 80040f4:	898a      	ldrh	r2, [r1, #12]
 80040f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fa:	4605      	mov	r5, r0
 80040fc:	0710      	lsls	r0, r2, #28
 80040fe:	460c      	mov	r4, r1
 8004100:	d458      	bmi.n	80041b4 <__sflush_r+0xc0>
 8004102:	684b      	ldr	r3, [r1, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dc05      	bgt.n	8004114 <__sflush_r+0x20>
 8004108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	dc02      	bgt.n	8004114 <__sflush_r+0x20>
 800410e:	2000      	movs	r0, #0
 8004110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004116:	2e00      	cmp	r6, #0
 8004118:	d0f9      	beq.n	800410e <__sflush_r+0x1a>
 800411a:	2300      	movs	r3, #0
 800411c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004120:	682f      	ldr	r7, [r5, #0]
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	d032      	beq.n	800418c <__sflush_r+0x98>
 8004126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004128:	89a3      	ldrh	r3, [r4, #12]
 800412a:	075a      	lsls	r2, r3, #29
 800412c:	d505      	bpl.n	800413a <__sflush_r+0x46>
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	1ac0      	subs	r0, r0, r3
 8004132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004134:	b10b      	cbz	r3, 800413a <__sflush_r+0x46>
 8004136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004138:	1ac0      	subs	r0, r0, r3
 800413a:	2300      	movs	r3, #0
 800413c:	4602      	mov	r2, r0
 800413e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004140:	6a21      	ldr	r1, [r4, #32]
 8004142:	4628      	mov	r0, r5
 8004144:	47b0      	blx	r6
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	d106      	bne.n	800415a <__sflush_r+0x66>
 800414c:	6829      	ldr	r1, [r5, #0]
 800414e:	291d      	cmp	r1, #29
 8004150:	d82c      	bhi.n	80041ac <__sflush_r+0xb8>
 8004152:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <__sflush_r+0x108>)
 8004154:	40ca      	lsrs	r2, r1
 8004156:	07d6      	lsls	r6, r2, #31
 8004158:	d528      	bpl.n	80041ac <__sflush_r+0xb8>
 800415a:	2200      	movs	r2, #0
 800415c:	6062      	str	r2, [r4, #4]
 800415e:	04d9      	lsls	r1, r3, #19
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	6022      	str	r2, [r4, #0]
 8004164:	d504      	bpl.n	8004170 <__sflush_r+0x7c>
 8004166:	1c42      	adds	r2, r0, #1
 8004168:	d101      	bne.n	800416e <__sflush_r+0x7a>
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	b903      	cbnz	r3, 8004170 <__sflush_r+0x7c>
 800416e:	6560      	str	r0, [r4, #84]	; 0x54
 8004170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004172:	602f      	str	r7, [r5, #0]
 8004174:	2900      	cmp	r1, #0
 8004176:	d0ca      	beq.n	800410e <__sflush_r+0x1a>
 8004178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800417c:	4299      	cmp	r1, r3
 800417e:	d002      	beq.n	8004186 <__sflush_r+0x92>
 8004180:	4628      	mov	r0, r5
 8004182:	f000 f9d5 	bl	8004530 <_free_r>
 8004186:	2000      	movs	r0, #0
 8004188:	6360      	str	r0, [r4, #52]	; 0x34
 800418a:	e7c1      	b.n	8004110 <__sflush_r+0x1c>
 800418c:	6a21      	ldr	r1, [r4, #32]
 800418e:	2301      	movs	r3, #1
 8004190:	4628      	mov	r0, r5
 8004192:	47b0      	blx	r6
 8004194:	1c41      	adds	r1, r0, #1
 8004196:	d1c7      	bne.n	8004128 <__sflush_r+0x34>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0c4      	beq.n	8004128 <__sflush_r+0x34>
 800419e:	2b1d      	cmp	r3, #29
 80041a0:	d001      	beq.n	80041a6 <__sflush_r+0xb2>
 80041a2:	2b16      	cmp	r3, #22
 80041a4:	d101      	bne.n	80041aa <__sflush_r+0xb6>
 80041a6:	602f      	str	r7, [r5, #0]
 80041a8:	e7b1      	b.n	800410e <__sflush_r+0x1a>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b0:	81a3      	strh	r3, [r4, #12]
 80041b2:	e7ad      	b.n	8004110 <__sflush_r+0x1c>
 80041b4:	690f      	ldr	r7, [r1, #16]
 80041b6:	2f00      	cmp	r7, #0
 80041b8:	d0a9      	beq.n	800410e <__sflush_r+0x1a>
 80041ba:	0793      	lsls	r3, r2, #30
 80041bc:	680e      	ldr	r6, [r1, #0]
 80041be:	bf08      	it	eq
 80041c0:	694b      	ldreq	r3, [r1, #20]
 80041c2:	600f      	str	r7, [r1, #0]
 80041c4:	bf18      	it	ne
 80041c6:	2300      	movne	r3, #0
 80041c8:	eba6 0807 	sub.w	r8, r6, r7
 80041cc:	608b      	str	r3, [r1, #8]
 80041ce:	f1b8 0f00 	cmp.w	r8, #0
 80041d2:	dd9c      	ble.n	800410e <__sflush_r+0x1a>
 80041d4:	6a21      	ldr	r1, [r4, #32]
 80041d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041d8:	4643      	mov	r3, r8
 80041da:	463a      	mov	r2, r7
 80041dc:	4628      	mov	r0, r5
 80041de:	47b0      	blx	r6
 80041e0:	2800      	cmp	r0, #0
 80041e2:	dc06      	bgt.n	80041f2 <__sflush_r+0xfe>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f0:	e78e      	b.n	8004110 <__sflush_r+0x1c>
 80041f2:	4407      	add	r7, r0
 80041f4:	eba8 0800 	sub.w	r8, r8, r0
 80041f8:	e7e9      	b.n	80041ce <__sflush_r+0xda>
 80041fa:	bf00      	nop
 80041fc:	20400001 	.word	0x20400001

08004200 <_fflush_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	690b      	ldr	r3, [r1, #16]
 8004204:	4605      	mov	r5, r0
 8004206:	460c      	mov	r4, r1
 8004208:	b913      	cbnz	r3, 8004210 <_fflush_r+0x10>
 800420a:	2500      	movs	r5, #0
 800420c:	4628      	mov	r0, r5
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	b118      	cbz	r0, 800421a <_fflush_r+0x1a>
 8004212:	6983      	ldr	r3, [r0, #24]
 8004214:	b90b      	cbnz	r3, 800421a <_fflush_r+0x1a>
 8004216:	f000 f887 	bl	8004328 <__sinit>
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <_fflush_r+0x6c>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d11b      	bne.n	8004258 <_fflush_r+0x58>
 8004220:	686c      	ldr	r4, [r5, #4]
 8004222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ef      	beq.n	800420a <_fflush_r+0xa>
 800422a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800422c:	07d0      	lsls	r0, r2, #31
 800422e:	d404      	bmi.n	800423a <_fflush_r+0x3a>
 8004230:	0599      	lsls	r1, r3, #22
 8004232:	d402      	bmi.n	800423a <_fflush_r+0x3a>
 8004234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004236:	f000 f915 	bl	8004464 <__retarget_lock_acquire_recursive>
 800423a:	4628      	mov	r0, r5
 800423c:	4621      	mov	r1, r4
 800423e:	f7ff ff59 	bl	80040f4 <__sflush_r>
 8004242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004244:	07da      	lsls	r2, r3, #31
 8004246:	4605      	mov	r5, r0
 8004248:	d4e0      	bmi.n	800420c <_fflush_r+0xc>
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	059b      	lsls	r3, r3, #22
 800424e:	d4dd      	bmi.n	800420c <_fflush_r+0xc>
 8004250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004252:	f000 f908 	bl	8004466 <__retarget_lock_release_recursive>
 8004256:	e7d9      	b.n	800420c <_fflush_r+0xc>
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <_fflush_r+0x70>)
 800425a:	429c      	cmp	r4, r3
 800425c:	d101      	bne.n	8004262 <_fflush_r+0x62>
 800425e:	68ac      	ldr	r4, [r5, #8]
 8004260:	e7df      	b.n	8004222 <_fflush_r+0x22>
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <_fflush_r+0x74>)
 8004264:	429c      	cmp	r4, r3
 8004266:	bf08      	it	eq
 8004268:	68ec      	ldreq	r4, [r5, #12]
 800426a:	e7da      	b.n	8004222 <_fflush_r+0x22>
 800426c:	08004e9c 	.word	0x08004e9c
 8004270:	08004ebc 	.word	0x08004ebc
 8004274:	08004e7c 	.word	0x08004e7c

08004278 <std>:
 8004278:	2300      	movs	r3, #0
 800427a:	b510      	push	{r4, lr}
 800427c:	4604      	mov	r4, r0
 800427e:	e9c0 3300 	strd	r3, r3, [r0]
 8004282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004286:	6083      	str	r3, [r0, #8]
 8004288:	8181      	strh	r1, [r0, #12]
 800428a:	6643      	str	r3, [r0, #100]	; 0x64
 800428c:	81c2      	strh	r2, [r0, #14]
 800428e:	6183      	str	r3, [r0, #24]
 8004290:	4619      	mov	r1, r3
 8004292:	2208      	movs	r2, #8
 8004294:	305c      	adds	r0, #92	; 0x5c
 8004296:	f7ff fdd7 	bl	8003e48 <memset>
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <std+0x38>)
 800429c:	6263      	str	r3, [r4, #36]	; 0x24
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <std+0x3c>)
 80042a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <std+0x40>)
 80042a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x44>)
 80042a8:	6224      	str	r4, [r4, #32]
 80042aa:	6323      	str	r3, [r4, #48]	; 0x30
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	bf00      	nop
 80042b0:	08004c81 	.word	0x08004c81
 80042b4:	08004ca3 	.word	0x08004ca3
 80042b8:	08004cdb 	.word	0x08004cdb
 80042bc:	08004cff 	.word	0x08004cff

080042c0 <_cleanup_r>:
 80042c0:	4901      	ldr	r1, [pc, #4]	; (80042c8 <_cleanup_r+0x8>)
 80042c2:	f000 b8af 	b.w	8004424 <_fwalk_reent>
 80042c6:	bf00      	nop
 80042c8:	08004201 	.word	0x08004201

080042cc <__sfmoreglue>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	1e4a      	subs	r2, r1, #1
 80042d0:	2568      	movs	r5, #104	; 0x68
 80042d2:	4355      	muls	r5, r2
 80042d4:	460e      	mov	r6, r1
 80042d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042da:	f000 f979 	bl	80045d0 <_malloc_r>
 80042de:	4604      	mov	r4, r0
 80042e0:	b140      	cbz	r0, 80042f4 <__sfmoreglue+0x28>
 80042e2:	2100      	movs	r1, #0
 80042e4:	e9c0 1600 	strd	r1, r6, [r0]
 80042e8:	300c      	adds	r0, #12
 80042ea:	60a0      	str	r0, [r4, #8]
 80042ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042f0:	f7ff fdaa 	bl	8003e48 <memset>
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}

080042f8 <__sfp_lock_acquire>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__sfp_lock_acquire+0x8>)
 80042fa:	f000 b8b3 	b.w	8004464 <__retarget_lock_acquire_recursive>
 80042fe:	bf00      	nop
 8004300:	20000174 	.word	0x20000174

08004304 <__sfp_lock_release>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__sfp_lock_release+0x8>)
 8004306:	f000 b8ae 	b.w	8004466 <__retarget_lock_release_recursive>
 800430a:	bf00      	nop
 800430c:	20000174 	.word	0x20000174

08004310 <__sinit_lock_acquire>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__sinit_lock_acquire+0x8>)
 8004312:	f000 b8a7 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	2000016f 	.word	0x2000016f

0800431c <__sinit_lock_release>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__sinit_lock_release+0x8>)
 800431e:	f000 b8a2 	b.w	8004466 <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	2000016f 	.word	0x2000016f

08004328 <__sinit>:
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
 800432c:	f7ff fff0 	bl	8004310 <__sinit_lock_acquire>
 8004330:	69a3      	ldr	r3, [r4, #24]
 8004332:	b11b      	cbz	r3, 800433c <__sinit+0x14>
 8004334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004338:	f7ff bff0 	b.w	800431c <__sinit_lock_release>
 800433c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004340:	6523      	str	r3, [r4, #80]	; 0x50
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <__sinit+0x68>)
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <__sinit+0x6c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	62a2      	str	r2, [r4, #40]	; 0x28
 800434a:	42a3      	cmp	r3, r4
 800434c:	bf04      	itt	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	61a3      	streq	r3, [r4, #24]
 8004352:	4620      	mov	r0, r4
 8004354:	f000 f820 	bl	8004398 <__sfp>
 8004358:	6060      	str	r0, [r4, #4]
 800435a:	4620      	mov	r0, r4
 800435c:	f000 f81c 	bl	8004398 <__sfp>
 8004360:	60a0      	str	r0, [r4, #8]
 8004362:	4620      	mov	r0, r4
 8004364:	f000 f818 	bl	8004398 <__sfp>
 8004368:	2200      	movs	r2, #0
 800436a:	60e0      	str	r0, [r4, #12]
 800436c:	2104      	movs	r1, #4
 800436e:	6860      	ldr	r0, [r4, #4]
 8004370:	f7ff ff82 	bl	8004278 <std>
 8004374:	68a0      	ldr	r0, [r4, #8]
 8004376:	2201      	movs	r2, #1
 8004378:	2109      	movs	r1, #9
 800437a:	f7ff ff7d 	bl	8004278 <std>
 800437e:	68e0      	ldr	r0, [r4, #12]
 8004380:	2202      	movs	r2, #2
 8004382:	2112      	movs	r1, #18
 8004384:	f7ff ff78 	bl	8004278 <std>
 8004388:	2301      	movs	r3, #1
 800438a:	61a3      	str	r3, [r4, #24]
 800438c:	e7d2      	b.n	8004334 <__sinit+0xc>
 800438e:	bf00      	nop
 8004390:	08004e78 	.word	0x08004e78
 8004394:	080042c1 	.word	0x080042c1

08004398 <__sfp>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	4607      	mov	r7, r0
 800439c:	f7ff ffac 	bl	80042f8 <__sfp_lock_acquire>
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <__sfp+0x84>)
 80043a2:	681e      	ldr	r6, [r3, #0]
 80043a4:	69b3      	ldr	r3, [r6, #24]
 80043a6:	b913      	cbnz	r3, 80043ae <__sfp+0x16>
 80043a8:	4630      	mov	r0, r6
 80043aa:	f7ff ffbd 	bl	8004328 <__sinit>
 80043ae:	3648      	adds	r6, #72	; 0x48
 80043b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	d503      	bpl.n	80043c0 <__sfp+0x28>
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	b30b      	cbz	r3, 8004400 <__sfp+0x68>
 80043bc:	6836      	ldr	r6, [r6, #0]
 80043be:	e7f7      	b.n	80043b0 <__sfp+0x18>
 80043c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043c4:	b9d5      	cbnz	r5, 80043fc <__sfp+0x64>
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <__sfp+0x88>)
 80043c8:	60e3      	str	r3, [r4, #12]
 80043ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043ce:	6665      	str	r5, [r4, #100]	; 0x64
 80043d0:	f000 f847 	bl	8004462 <__retarget_lock_init_recursive>
 80043d4:	f7ff ff96 	bl	8004304 <__sfp_lock_release>
 80043d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043e0:	6025      	str	r5, [r4, #0]
 80043e2:	61a5      	str	r5, [r4, #24]
 80043e4:	2208      	movs	r2, #8
 80043e6:	4629      	mov	r1, r5
 80043e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043ec:	f7ff fd2c 	bl	8003e48 <memset>
 80043f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043f8:	4620      	mov	r0, r4
 80043fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fc:	3468      	adds	r4, #104	; 0x68
 80043fe:	e7d9      	b.n	80043b4 <__sfp+0x1c>
 8004400:	2104      	movs	r1, #4
 8004402:	4638      	mov	r0, r7
 8004404:	f7ff ff62 	bl	80042cc <__sfmoreglue>
 8004408:	4604      	mov	r4, r0
 800440a:	6030      	str	r0, [r6, #0]
 800440c:	2800      	cmp	r0, #0
 800440e:	d1d5      	bne.n	80043bc <__sfp+0x24>
 8004410:	f7ff ff78 	bl	8004304 <__sfp_lock_release>
 8004414:	230c      	movs	r3, #12
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	e7ee      	b.n	80043f8 <__sfp+0x60>
 800441a:	bf00      	nop
 800441c:	08004e78 	.word	0x08004e78
 8004420:	ffff0001 	.word	0xffff0001

08004424 <_fwalk_reent>:
 8004424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004428:	4606      	mov	r6, r0
 800442a:	4688      	mov	r8, r1
 800442c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004430:	2700      	movs	r7, #0
 8004432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004436:	f1b9 0901 	subs.w	r9, r9, #1
 800443a:	d505      	bpl.n	8004448 <_fwalk_reent+0x24>
 800443c:	6824      	ldr	r4, [r4, #0]
 800443e:	2c00      	cmp	r4, #0
 8004440:	d1f7      	bne.n	8004432 <_fwalk_reent+0xe>
 8004442:	4638      	mov	r0, r7
 8004444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004448:	89ab      	ldrh	r3, [r5, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d907      	bls.n	800445e <_fwalk_reent+0x3a>
 800444e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004452:	3301      	adds	r3, #1
 8004454:	d003      	beq.n	800445e <_fwalk_reent+0x3a>
 8004456:	4629      	mov	r1, r5
 8004458:	4630      	mov	r0, r6
 800445a:	47c0      	blx	r8
 800445c:	4307      	orrs	r7, r0
 800445e:	3568      	adds	r5, #104	; 0x68
 8004460:	e7e9      	b.n	8004436 <_fwalk_reent+0x12>

08004462 <__retarget_lock_init_recursive>:
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <__swhatbuf_r>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	460e      	mov	r6, r1
 800446c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004470:	2900      	cmp	r1, #0
 8004472:	b096      	sub	sp, #88	; 0x58
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	da07      	bge.n	800448a <__swhatbuf_r+0x22>
 800447a:	2300      	movs	r3, #0
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	89b3      	ldrh	r3, [r6, #12]
 8004480:	061a      	lsls	r2, r3, #24
 8004482:	d410      	bmi.n	80044a6 <__swhatbuf_r+0x3e>
 8004484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004488:	e00e      	b.n	80044a8 <__swhatbuf_r+0x40>
 800448a:	466a      	mov	r2, sp
 800448c:	f000 fc5e 	bl	8004d4c <_fstat_r>
 8004490:	2800      	cmp	r0, #0
 8004492:	dbf2      	blt.n	800447a <__swhatbuf_r+0x12>
 8004494:	9a01      	ldr	r2, [sp, #4]
 8004496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800449a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800449e:	425a      	negs	r2, r3
 80044a0:	415a      	adcs	r2, r3
 80044a2:	602a      	str	r2, [r5, #0]
 80044a4:	e7ee      	b.n	8004484 <__swhatbuf_r+0x1c>
 80044a6:	2340      	movs	r3, #64	; 0x40
 80044a8:	2000      	movs	r0, #0
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	b016      	add	sp, #88	; 0x58
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <__smakebuf_r>:
 80044b0:	898b      	ldrh	r3, [r1, #12]
 80044b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044b4:	079d      	lsls	r5, r3, #30
 80044b6:	4606      	mov	r6, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	d507      	bpl.n	80044cc <__smakebuf_r+0x1c>
 80044bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	2301      	movs	r3, #1
 80044c6:	6163      	str	r3, [r4, #20]
 80044c8:	b002      	add	sp, #8
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	ab01      	add	r3, sp, #4
 80044ce:	466a      	mov	r2, sp
 80044d0:	f7ff ffca 	bl	8004468 <__swhatbuf_r>
 80044d4:	9900      	ldr	r1, [sp, #0]
 80044d6:	4605      	mov	r5, r0
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 f879 	bl	80045d0 <_malloc_r>
 80044de:	b948      	cbnz	r0, 80044f4 <__smakebuf_r+0x44>
 80044e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e4:	059a      	lsls	r2, r3, #22
 80044e6:	d4ef      	bmi.n	80044c8 <__smakebuf_r+0x18>
 80044e8:	f023 0303 	bic.w	r3, r3, #3
 80044ec:	f043 0302 	orr.w	r3, r3, #2
 80044f0:	81a3      	strh	r3, [r4, #12]
 80044f2:	e7e3      	b.n	80044bc <__smakebuf_r+0xc>
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <__smakebuf_r+0x7c>)
 80044f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	6020      	str	r0, [r4, #0]
 80044fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	9b00      	ldr	r3, [sp, #0]
 8004504:	6163      	str	r3, [r4, #20]
 8004506:	9b01      	ldr	r3, [sp, #4]
 8004508:	6120      	str	r0, [r4, #16]
 800450a:	b15b      	cbz	r3, 8004524 <__smakebuf_r+0x74>
 800450c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004510:	4630      	mov	r0, r6
 8004512:	f000 fc2d 	bl	8004d70 <_isatty_r>
 8004516:	b128      	cbz	r0, 8004524 <__smakebuf_r+0x74>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	89a0      	ldrh	r0, [r4, #12]
 8004526:	4305      	orrs	r5, r0
 8004528:	81a5      	strh	r5, [r4, #12]
 800452a:	e7cd      	b.n	80044c8 <__smakebuf_r+0x18>
 800452c:	080042c1 	.word	0x080042c1

08004530 <_free_r>:
 8004530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004532:	2900      	cmp	r1, #0
 8004534:	d048      	beq.n	80045c8 <_free_r+0x98>
 8004536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453a:	9001      	str	r0, [sp, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f1a1 0404 	sub.w	r4, r1, #4
 8004542:	bfb8      	it	lt
 8004544:	18e4      	addlt	r4, r4, r3
 8004546:	f000 fc35 	bl	8004db4 <__malloc_lock>
 800454a:	4a20      	ldr	r2, [pc, #128]	; (80045cc <_free_r+0x9c>)
 800454c:	9801      	ldr	r0, [sp, #4]
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	4615      	mov	r5, r2
 8004552:	b933      	cbnz	r3, 8004562 <_free_r+0x32>
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	6014      	str	r4, [r2, #0]
 8004558:	b003      	add	sp, #12
 800455a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800455e:	f000 bc2f 	b.w	8004dc0 <__malloc_unlock>
 8004562:	42a3      	cmp	r3, r4
 8004564:	d90b      	bls.n	800457e <_free_r+0x4e>
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	1862      	adds	r2, r4, r1
 800456a:	4293      	cmp	r3, r2
 800456c:	bf04      	itt	eq
 800456e:	681a      	ldreq	r2, [r3, #0]
 8004570:	685b      	ldreq	r3, [r3, #4]
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	bf04      	itt	eq
 8004576:	1852      	addeq	r2, r2, r1
 8004578:	6022      	streq	r2, [r4, #0]
 800457a:	602c      	str	r4, [r5, #0]
 800457c:	e7ec      	b.n	8004558 <_free_r+0x28>
 800457e:	461a      	mov	r2, r3
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	b10b      	cbz	r3, 8004588 <_free_r+0x58>
 8004584:	42a3      	cmp	r3, r4
 8004586:	d9fa      	bls.n	800457e <_free_r+0x4e>
 8004588:	6811      	ldr	r1, [r2, #0]
 800458a:	1855      	adds	r5, r2, r1
 800458c:	42a5      	cmp	r5, r4
 800458e:	d10b      	bne.n	80045a8 <_free_r+0x78>
 8004590:	6824      	ldr	r4, [r4, #0]
 8004592:	4421      	add	r1, r4
 8004594:	1854      	adds	r4, r2, r1
 8004596:	42a3      	cmp	r3, r4
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	d1dd      	bne.n	8004558 <_free_r+0x28>
 800459c:	681c      	ldr	r4, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	6053      	str	r3, [r2, #4]
 80045a2:	4421      	add	r1, r4
 80045a4:	6011      	str	r1, [r2, #0]
 80045a6:	e7d7      	b.n	8004558 <_free_r+0x28>
 80045a8:	d902      	bls.n	80045b0 <_free_r+0x80>
 80045aa:	230c      	movs	r3, #12
 80045ac:	6003      	str	r3, [r0, #0]
 80045ae:	e7d3      	b.n	8004558 <_free_r+0x28>
 80045b0:	6825      	ldr	r5, [r4, #0]
 80045b2:	1961      	adds	r1, r4, r5
 80045b4:	428b      	cmp	r3, r1
 80045b6:	bf04      	itt	eq
 80045b8:	6819      	ldreq	r1, [r3, #0]
 80045ba:	685b      	ldreq	r3, [r3, #4]
 80045bc:	6063      	str	r3, [r4, #4]
 80045be:	bf04      	itt	eq
 80045c0:	1949      	addeq	r1, r1, r5
 80045c2:	6021      	streq	r1, [r4, #0]
 80045c4:	6054      	str	r4, [r2, #4]
 80045c6:	e7c7      	b.n	8004558 <_free_r+0x28>
 80045c8:	b003      	add	sp, #12
 80045ca:	bd30      	pop	{r4, r5, pc}
 80045cc:	20000090 	.word	0x20000090

080045d0 <_malloc_r>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	1ccd      	adds	r5, r1, #3
 80045d4:	f025 0503 	bic.w	r5, r5, #3
 80045d8:	3508      	adds	r5, #8
 80045da:	2d0c      	cmp	r5, #12
 80045dc:	bf38      	it	cc
 80045de:	250c      	movcc	r5, #12
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	4606      	mov	r6, r0
 80045e4:	db01      	blt.n	80045ea <_malloc_r+0x1a>
 80045e6:	42a9      	cmp	r1, r5
 80045e8:	d903      	bls.n	80045f2 <_malloc_r+0x22>
 80045ea:	230c      	movs	r3, #12
 80045ec:	6033      	str	r3, [r6, #0]
 80045ee:	2000      	movs	r0, #0
 80045f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f2:	f000 fbdf 	bl	8004db4 <__malloc_lock>
 80045f6:	4921      	ldr	r1, [pc, #132]	; (800467c <_malloc_r+0xac>)
 80045f8:	680a      	ldr	r2, [r1, #0]
 80045fa:	4614      	mov	r4, r2
 80045fc:	b99c      	cbnz	r4, 8004626 <_malloc_r+0x56>
 80045fe:	4f20      	ldr	r7, [pc, #128]	; (8004680 <_malloc_r+0xb0>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	b923      	cbnz	r3, 800460e <_malloc_r+0x3e>
 8004604:	4621      	mov	r1, r4
 8004606:	4630      	mov	r0, r6
 8004608:	f000 fb2a 	bl	8004c60 <_sbrk_r>
 800460c:	6038      	str	r0, [r7, #0]
 800460e:	4629      	mov	r1, r5
 8004610:	4630      	mov	r0, r6
 8004612:	f000 fb25 	bl	8004c60 <_sbrk_r>
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	d123      	bne.n	8004662 <_malloc_r+0x92>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	4630      	mov	r0, r6
 8004620:	f000 fbce 	bl	8004dc0 <__malloc_unlock>
 8004624:	e7e3      	b.n	80045ee <_malloc_r+0x1e>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	1b5b      	subs	r3, r3, r5
 800462a:	d417      	bmi.n	800465c <_malloc_r+0x8c>
 800462c:	2b0b      	cmp	r3, #11
 800462e:	d903      	bls.n	8004638 <_malloc_r+0x68>
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	441c      	add	r4, r3
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	e004      	b.n	8004642 <_malloc_r+0x72>
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	42a2      	cmp	r2, r4
 800463c:	bf0c      	ite	eq
 800463e:	600b      	streq	r3, [r1, #0]
 8004640:	6053      	strne	r3, [r2, #4]
 8004642:	4630      	mov	r0, r6
 8004644:	f000 fbbc 	bl	8004dc0 <__malloc_unlock>
 8004648:	f104 000b 	add.w	r0, r4, #11
 800464c:	1d23      	adds	r3, r4, #4
 800464e:	f020 0007 	bic.w	r0, r0, #7
 8004652:	1ac2      	subs	r2, r0, r3
 8004654:	d0cc      	beq.n	80045f0 <_malloc_r+0x20>
 8004656:	1a1b      	subs	r3, r3, r0
 8004658:	50a3      	str	r3, [r4, r2]
 800465a:	e7c9      	b.n	80045f0 <_malloc_r+0x20>
 800465c:	4622      	mov	r2, r4
 800465e:	6864      	ldr	r4, [r4, #4]
 8004660:	e7cc      	b.n	80045fc <_malloc_r+0x2c>
 8004662:	1cc4      	adds	r4, r0, #3
 8004664:	f024 0403 	bic.w	r4, r4, #3
 8004668:	42a0      	cmp	r0, r4
 800466a:	d0e3      	beq.n	8004634 <_malloc_r+0x64>
 800466c:	1a21      	subs	r1, r4, r0
 800466e:	4630      	mov	r0, r6
 8004670:	f000 faf6 	bl	8004c60 <_sbrk_r>
 8004674:	3001      	adds	r0, #1
 8004676:	d1dd      	bne.n	8004634 <_malloc_r+0x64>
 8004678:	e7cf      	b.n	800461a <_malloc_r+0x4a>
 800467a:	bf00      	nop
 800467c:	20000090 	.word	0x20000090
 8004680:	20000094 	.word	0x20000094

08004684 <__sfputc_r>:
 8004684:	6893      	ldr	r3, [r2, #8]
 8004686:	3b01      	subs	r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	b410      	push	{r4}
 800468c:	6093      	str	r3, [r2, #8]
 800468e:	da08      	bge.n	80046a2 <__sfputc_r+0x1e>
 8004690:	6994      	ldr	r4, [r2, #24]
 8004692:	42a3      	cmp	r3, r4
 8004694:	db01      	blt.n	800469a <__sfputc_r+0x16>
 8004696:	290a      	cmp	r1, #10
 8004698:	d103      	bne.n	80046a2 <__sfputc_r+0x1e>
 800469a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800469e:	f7ff bc69 	b.w	8003f74 <__swbuf_r>
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	1c58      	adds	r0, r3, #1
 80046a6:	6010      	str	r0, [r2, #0]
 80046a8:	7019      	strb	r1, [r3, #0]
 80046aa:	4608      	mov	r0, r1
 80046ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <__sfputs_r>:
 80046b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b4:	4606      	mov	r6, r0
 80046b6:	460f      	mov	r7, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	18d5      	adds	r5, r2, r3
 80046bc:	42ac      	cmp	r4, r5
 80046be:	d101      	bne.n	80046c4 <__sfputs_r+0x12>
 80046c0:	2000      	movs	r0, #0
 80046c2:	e007      	b.n	80046d4 <__sfputs_r+0x22>
 80046c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c8:	463a      	mov	r2, r7
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff ffda 	bl	8004684 <__sfputc_r>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d1f3      	bne.n	80046bc <__sfputs_r+0xa>
 80046d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046d8 <_vfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	460d      	mov	r5, r1
 80046de:	b09d      	sub	sp, #116	; 0x74
 80046e0:	4614      	mov	r4, r2
 80046e2:	4698      	mov	r8, r3
 80046e4:	4606      	mov	r6, r0
 80046e6:	b118      	cbz	r0, 80046f0 <_vfiprintf_r+0x18>
 80046e8:	6983      	ldr	r3, [r0, #24]
 80046ea:	b90b      	cbnz	r3, 80046f0 <_vfiprintf_r+0x18>
 80046ec:	f7ff fe1c 	bl	8004328 <__sinit>
 80046f0:	4b89      	ldr	r3, [pc, #548]	; (8004918 <_vfiprintf_r+0x240>)
 80046f2:	429d      	cmp	r5, r3
 80046f4:	d11b      	bne.n	800472e <_vfiprintf_r+0x56>
 80046f6:	6875      	ldr	r5, [r6, #4]
 80046f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046fa:	07d9      	lsls	r1, r3, #31
 80046fc:	d405      	bmi.n	800470a <_vfiprintf_r+0x32>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	059a      	lsls	r2, r3, #22
 8004702:	d402      	bmi.n	800470a <_vfiprintf_r+0x32>
 8004704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004706:	f7ff fead 	bl	8004464 <__retarget_lock_acquire_recursive>
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	d501      	bpl.n	8004714 <_vfiprintf_r+0x3c>
 8004710:	692b      	ldr	r3, [r5, #16]
 8004712:	b9eb      	cbnz	r3, 8004750 <_vfiprintf_r+0x78>
 8004714:	4629      	mov	r1, r5
 8004716:	4630      	mov	r0, r6
 8004718:	f7ff fc7e 	bl	8004018 <__swsetup_r>
 800471c:	b1c0      	cbz	r0, 8004750 <_vfiprintf_r+0x78>
 800471e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004720:	07dc      	lsls	r4, r3, #31
 8004722:	d50e      	bpl.n	8004742 <_vfiprintf_r+0x6a>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004728:	b01d      	add	sp, #116	; 0x74
 800472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472e:	4b7b      	ldr	r3, [pc, #492]	; (800491c <_vfiprintf_r+0x244>)
 8004730:	429d      	cmp	r5, r3
 8004732:	d101      	bne.n	8004738 <_vfiprintf_r+0x60>
 8004734:	68b5      	ldr	r5, [r6, #8]
 8004736:	e7df      	b.n	80046f8 <_vfiprintf_r+0x20>
 8004738:	4b79      	ldr	r3, [pc, #484]	; (8004920 <_vfiprintf_r+0x248>)
 800473a:	429d      	cmp	r5, r3
 800473c:	bf08      	it	eq
 800473e:	68f5      	ldreq	r5, [r6, #12]
 8004740:	e7da      	b.n	80046f8 <_vfiprintf_r+0x20>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	0598      	lsls	r0, r3, #22
 8004746:	d4ed      	bmi.n	8004724 <_vfiprintf_r+0x4c>
 8004748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800474a:	f7ff fe8c 	bl	8004466 <__retarget_lock_release_recursive>
 800474e:	e7e9      	b.n	8004724 <_vfiprintf_r+0x4c>
 8004750:	2300      	movs	r3, #0
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	2320      	movs	r3, #32
 8004756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800475a:	f8cd 800c 	str.w	r8, [sp, #12]
 800475e:	2330      	movs	r3, #48	; 0x30
 8004760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004924 <_vfiprintf_r+0x24c>
 8004764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004768:	f04f 0901 	mov.w	r9, #1
 800476c:	4623      	mov	r3, r4
 800476e:	469a      	mov	sl, r3
 8004770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004774:	b10a      	cbz	r2, 800477a <_vfiprintf_r+0xa2>
 8004776:	2a25      	cmp	r2, #37	; 0x25
 8004778:	d1f9      	bne.n	800476e <_vfiprintf_r+0x96>
 800477a:	ebba 0b04 	subs.w	fp, sl, r4
 800477e:	d00b      	beq.n	8004798 <_vfiprintf_r+0xc0>
 8004780:	465b      	mov	r3, fp
 8004782:	4622      	mov	r2, r4
 8004784:	4629      	mov	r1, r5
 8004786:	4630      	mov	r0, r6
 8004788:	f7ff ff93 	bl	80046b2 <__sfputs_r>
 800478c:	3001      	adds	r0, #1
 800478e:	f000 80aa 	beq.w	80048e6 <_vfiprintf_r+0x20e>
 8004792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004794:	445a      	add	r2, fp
 8004796:	9209      	str	r2, [sp, #36]	; 0x24
 8004798:	f89a 3000 	ldrb.w	r3, [sl]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a2 	beq.w	80048e6 <_vfiprintf_r+0x20e>
 80047a2:	2300      	movs	r3, #0
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ac:	f10a 0a01 	add.w	sl, sl, #1
 80047b0:	9304      	str	r3, [sp, #16]
 80047b2:	9307      	str	r3, [sp, #28]
 80047b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047b8:	931a      	str	r3, [sp, #104]	; 0x68
 80047ba:	4654      	mov	r4, sl
 80047bc:	2205      	movs	r2, #5
 80047be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c2:	4858      	ldr	r0, [pc, #352]	; (8004924 <_vfiprintf_r+0x24c>)
 80047c4:	f7fb fd04 	bl	80001d0 <memchr>
 80047c8:	9a04      	ldr	r2, [sp, #16]
 80047ca:	b9d8      	cbnz	r0, 8004804 <_vfiprintf_r+0x12c>
 80047cc:	06d1      	lsls	r1, r2, #27
 80047ce:	bf44      	itt	mi
 80047d0:	2320      	movmi	r3, #32
 80047d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d6:	0713      	lsls	r3, r2, #28
 80047d8:	bf44      	itt	mi
 80047da:	232b      	movmi	r3, #43	; 0x2b
 80047dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e0:	f89a 3000 	ldrb.w	r3, [sl]
 80047e4:	2b2a      	cmp	r3, #42	; 0x2a
 80047e6:	d015      	beq.n	8004814 <_vfiprintf_r+0x13c>
 80047e8:	9a07      	ldr	r2, [sp, #28]
 80047ea:	4654      	mov	r4, sl
 80047ec:	2000      	movs	r0, #0
 80047ee:	f04f 0c0a 	mov.w	ip, #10
 80047f2:	4621      	mov	r1, r4
 80047f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f8:	3b30      	subs	r3, #48	; 0x30
 80047fa:	2b09      	cmp	r3, #9
 80047fc:	d94e      	bls.n	800489c <_vfiprintf_r+0x1c4>
 80047fe:	b1b0      	cbz	r0, 800482e <_vfiprintf_r+0x156>
 8004800:	9207      	str	r2, [sp, #28]
 8004802:	e014      	b.n	800482e <_vfiprintf_r+0x156>
 8004804:	eba0 0308 	sub.w	r3, r0, r8
 8004808:	fa09 f303 	lsl.w	r3, r9, r3
 800480c:	4313      	orrs	r3, r2
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	46a2      	mov	sl, r4
 8004812:	e7d2      	b.n	80047ba <_vfiprintf_r+0xe2>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	1d19      	adds	r1, r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	9103      	str	r1, [sp, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	bfbb      	ittet	lt
 8004820:	425b      	neglt	r3, r3
 8004822:	f042 0202 	orrlt.w	r2, r2, #2
 8004826:	9307      	strge	r3, [sp, #28]
 8004828:	9307      	strlt	r3, [sp, #28]
 800482a:	bfb8      	it	lt
 800482c:	9204      	strlt	r2, [sp, #16]
 800482e:	7823      	ldrb	r3, [r4, #0]
 8004830:	2b2e      	cmp	r3, #46	; 0x2e
 8004832:	d10c      	bne.n	800484e <_vfiprintf_r+0x176>
 8004834:	7863      	ldrb	r3, [r4, #1]
 8004836:	2b2a      	cmp	r3, #42	; 0x2a
 8004838:	d135      	bne.n	80048a6 <_vfiprintf_r+0x1ce>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9203      	str	r2, [sp, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800484a:	3402      	adds	r4, #2
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004934 <_vfiprintf_r+0x25c>
 8004852:	7821      	ldrb	r1, [r4, #0]
 8004854:	2203      	movs	r2, #3
 8004856:	4650      	mov	r0, sl
 8004858:	f7fb fcba 	bl	80001d0 <memchr>
 800485c:	b140      	cbz	r0, 8004870 <_vfiprintf_r+0x198>
 800485e:	2340      	movs	r3, #64	; 0x40
 8004860:	eba0 000a 	sub.w	r0, r0, sl
 8004864:	fa03 f000 	lsl.w	r0, r3, r0
 8004868:	9b04      	ldr	r3, [sp, #16]
 800486a:	4303      	orrs	r3, r0
 800486c:	3401      	adds	r4, #1
 800486e:	9304      	str	r3, [sp, #16]
 8004870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004874:	482c      	ldr	r0, [pc, #176]	; (8004928 <_vfiprintf_r+0x250>)
 8004876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800487a:	2206      	movs	r2, #6
 800487c:	f7fb fca8 	bl	80001d0 <memchr>
 8004880:	2800      	cmp	r0, #0
 8004882:	d03f      	beq.n	8004904 <_vfiprintf_r+0x22c>
 8004884:	4b29      	ldr	r3, [pc, #164]	; (800492c <_vfiprintf_r+0x254>)
 8004886:	bb1b      	cbnz	r3, 80048d0 <_vfiprintf_r+0x1f8>
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	3307      	adds	r3, #7
 800488c:	f023 0307 	bic.w	r3, r3, #7
 8004890:	3308      	adds	r3, #8
 8004892:	9303      	str	r3, [sp, #12]
 8004894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004896:	443b      	add	r3, r7
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	e767      	b.n	800476c <_vfiprintf_r+0x94>
 800489c:	fb0c 3202 	mla	r2, ip, r2, r3
 80048a0:	460c      	mov	r4, r1
 80048a2:	2001      	movs	r0, #1
 80048a4:	e7a5      	b.n	80047f2 <_vfiprintf_r+0x11a>
 80048a6:	2300      	movs	r3, #0
 80048a8:	3401      	adds	r4, #1
 80048aa:	9305      	str	r3, [sp, #20]
 80048ac:	4619      	mov	r1, r3
 80048ae:	f04f 0c0a 	mov.w	ip, #10
 80048b2:	4620      	mov	r0, r4
 80048b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b8:	3a30      	subs	r2, #48	; 0x30
 80048ba:	2a09      	cmp	r2, #9
 80048bc:	d903      	bls.n	80048c6 <_vfiprintf_r+0x1ee>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0c5      	beq.n	800484e <_vfiprintf_r+0x176>
 80048c2:	9105      	str	r1, [sp, #20]
 80048c4:	e7c3      	b.n	800484e <_vfiprintf_r+0x176>
 80048c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ca:	4604      	mov	r4, r0
 80048cc:	2301      	movs	r3, #1
 80048ce:	e7f0      	b.n	80048b2 <_vfiprintf_r+0x1da>
 80048d0:	ab03      	add	r3, sp, #12
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	462a      	mov	r2, r5
 80048d6:	4b16      	ldr	r3, [pc, #88]	; (8004930 <_vfiprintf_r+0x258>)
 80048d8:	a904      	add	r1, sp, #16
 80048da:	4630      	mov	r0, r6
 80048dc:	f3af 8000 	nop.w
 80048e0:	4607      	mov	r7, r0
 80048e2:	1c78      	adds	r0, r7, #1
 80048e4:	d1d6      	bne.n	8004894 <_vfiprintf_r+0x1bc>
 80048e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048e8:	07d9      	lsls	r1, r3, #31
 80048ea:	d405      	bmi.n	80048f8 <_vfiprintf_r+0x220>
 80048ec:	89ab      	ldrh	r3, [r5, #12]
 80048ee:	059a      	lsls	r2, r3, #22
 80048f0:	d402      	bmi.n	80048f8 <_vfiprintf_r+0x220>
 80048f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048f4:	f7ff fdb7 	bl	8004466 <__retarget_lock_release_recursive>
 80048f8:	89ab      	ldrh	r3, [r5, #12]
 80048fa:	065b      	lsls	r3, r3, #25
 80048fc:	f53f af12 	bmi.w	8004724 <_vfiprintf_r+0x4c>
 8004900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004902:	e711      	b.n	8004728 <_vfiprintf_r+0x50>
 8004904:	ab03      	add	r3, sp, #12
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	462a      	mov	r2, r5
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <_vfiprintf_r+0x258>)
 800490c:	a904      	add	r1, sp, #16
 800490e:	4630      	mov	r0, r6
 8004910:	f000 f880 	bl	8004a14 <_printf_i>
 8004914:	e7e4      	b.n	80048e0 <_vfiprintf_r+0x208>
 8004916:	bf00      	nop
 8004918:	08004e9c 	.word	0x08004e9c
 800491c:	08004ebc 	.word	0x08004ebc
 8004920:	08004e7c 	.word	0x08004e7c
 8004924:	08004edc 	.word	0x08004edc
 8004928:	08004ee6 	.word	0x08004ee6
 800492c:	00000000 	.word	0x00000000
 8004930:	080046b3 	.word	0x080046b3
 8004934:	08004ee2 	.word	0x08004ee2

08004938 <_printf_common>:
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	4616      	mov	r6, r2
 800493e:	4699      	mov	r9, r3
 8004940:	688a      	ldr	r2, [r1, #8]
 8004942:	690b      	ldr	r3, [r1, #16]
 8004944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004948:	4293      	cmp	r3, r2
 800494a:	bfb8      	it	lt
 800494c:	4613      	movlt	r3, r2
 800494e:	6033      	str	r3, [r6, #0]
 8004950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004954:	4607      	mov	r7, r0
 8004956:	460c      	mov	r4, r1
 8004958:	b10a      	cbz	r2, 800495e <_printf_common+0x26>
 800495a:	3301      	adds	r3, #1
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	0699      	lsls	r1, r3, #26
 8004962:	bf42      	ittt	mi
 8004964:	6833      	ldrmi	r3, [r6, #0]
 8004966:	3302      	addmi	r3, #2
 8004968:	6033      	strmi	r3, [r6, #0]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	f015 0506 	ands.w	r5, r5, #6
 8004970:	d106      	bne.n	8004980 <_printf_common+0x48>
 8004972:	f104 0a19 	add.w	sl, r4, #25
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	42ab      	cmp	r3, r5
 800497e:	dc26      	bgt.n	80049ce <_printf_common+0x96>
 8004980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004984:	1e13      	subs	r3, r2, #0
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	2301      	movne	r3, #1
 800498c:	0692      	lsls	r2, r2, #26
 800498e:	d42b      	bmi.n	80049e8 <_printf_common+0xb0>
 8004990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004994:	4649      	mov	r1, r9
 8004996:	4638      	mov	r0, r7
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d01e      	beq.n	80049dc <_printf_common+0xa4>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	6832      	ldr	r2, [r6, #0]
 80049a4:	f003 0306 	and.w	r3, r3, #6
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	bf08      	it	eq
 80049ac:	1aad      	subeq	r5, r5, r2
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	6922      	ldr	r2, [r4, #16]
 80049b2:	bf0c      	ite	eq
 80049b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049b8:	2500      	movne	r5, #0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	bfc4      	itt	gt
 80049be:	1a9b      	subgt	r3, r3, r2
 80049c0:	18ed      	addgt	r5, r5, r3
 80049c2:	2600      	movs	r6, #0
 80049c4:	341a      	adds	r4, #26
 80049c6:	42b5      	cmp	r5, r6
 80049c8:	d11a      	bne.n	8004a00 <_printf_common+0xc8>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e008      	b.n	80049e0 <_printf_common+0xa8>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	4649      	mov	r1, r9
 80049d4:	4638      	mov	r0, r7
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d103      	bne.n	80049e4 <_printf_common+0xac>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	3501      	adds	r5, #1
 80049e6:	e7c6      	b.n	8004976 <_printf_common+0x3e>
 80049e8:	18e1      	adds	r1, r4, r3
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	2030      	movs	r0, #48	; 0x30
 80049ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f2:	4422      	add	r2, r4
 80049f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049fc:	3302      	adds	r3, #2
 80049fe:	e7c7      	b.n	8004990 <_printf_common+0x58>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4622      	mov	r2, r4
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa4>
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7d9      	b.n	80049c6 <_printf_common+0x8e>
	...

08004a14 <_printf_i>:
 8004a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	4691      	mov	r9, r2
 8004a1c:	7e27      	ldrb	r7, [r4, #24]
 8004a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a20:	2f78      	cmp	r7, #120	; 0x78
 8004a22:	4680      	mov	r8, r0
 8004a24:	469a      	mov	sl, r3
 8004a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2a:	d807      	bhi.n	8004a3c <_printf_i+0x28>
 8004a2c:	2f62      	cmp	r7, #98	; 0x62
 8004a2e:	d80a      	bhi.n	8004a46 <_printf_i+0x32>
 8004a30:	2f00      	cmp	r7, #0
 8004a32:	f000 80d8 	beq.w	8004be6 <_printf_i+0x1d2>
 8004a36:	2f58      	cmp	r7, #88	; 0x58
 8004a38:	f000 80a3 	beq.w	8004b82 <_printf_i+0x16e>
 8004a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a44:	e03a      	b.n	8004abc <_printf_i+0xa8>
 8004a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4a:	2b15      	cmp	r3, #21
 8004a4c:	d8f6      	bhi.n	8004a3c <_printf_i+0x28>
 8004a4e:	a001      	add	r0, pc, #4	; (adr r0, 8004a54 <_printf_i+0x40>)
 8004a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004a3d 	.word	0x08004a3d
 8004a60:	08004a3d 	.word	0x08004a3d
 8004a64:	08004a3d 	.word	0x08004a3d
 8004a68:	08004a3d 	.word	0x08004a3d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a3d 	.word	0x08004a3d
 8004a74:	08004a3d 	.word	0x08004a3d
 8004a78:	08004a3d 	.word	0x08004a3d
 8004a7c:	08004a3d 	.word	0x08004a3d
 8004a80:	08004bcd 	.word	0x08004bcd
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004baf 	.word	0x08004baf
 8004a8c:	08004a3d 	.word	0x08004a3d
 8004a90:	08004a3d 	.word	0x08004a3d
 8004a94:	08004bef 	.word	0x08004bef
 8004a98:	08004a3d 	.word	0x08004a3d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a3d 	.word	0x08004a3d
 8004aa4:	08004a3d 	.word	0x08004a3d
 8004aa8:	08004bb7 	.word	0x08004bb7
 8004aac:	680b      	ldr	r3, [r1, #0]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	600a      	str	r2, [r1, #0]
 8004ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0a3      	b.n	8004c08 <_printf_i+0x1f4>
 8004ac0:	6825      	ldr	r5, [r4, #0]
 8004ac2:	6808      	ldr	r0, [r1, #0]
 8004ac4:	062e      	lsls	r6, r5, #24
 8004ac6:	f100 0304 	add.w	r3, r0, #4
 8004aca:	d50a      	bpl.n	8004ae2 <_printf_i+0xce>
 8004acc:	6805      	ldr	r5, [r0, #0]
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	da03      	bge.n	8004adc <_printf_i+0xc8>
 8004ad4:	232d      	movs	r3, #45	; 0x2d
 8004ad6:	426d      	negs	r5, r5
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	485e      	ldr	r0, [pc, #376]	; (8004c58 <_printf_i+0x244>)
 8004ade:	230a      	movs	r3, #10
 8004ae0:	e019      	b.n	8004b16 <_printf_i+0x102>
 8004ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ae6:	6805      	ldr	r5, [r0, #0]
 8004ae8:	600b      	str	r3, [r1, #0]
 8004aea:	bf18      	it	ne
 8004aec:	b22d      	sxthne	r5, r5
 8004aee:	e7ef      	b.n	8004ad0 <_printf_i+0xbc>
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	1d18      	adds	r0, r3, #4
 8004af6:	6008      	str	r0, [r1, #0]
 8004af8:	0628      	lsls	r0, r5, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xec>
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0xf2>
 8004b00:	0669      	lsls	r1, r5, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xe8>
 8004b04:	881d      	ldrh	r5, [r3, #0]
 8004b06:	4854      	ldr	r0, [pc, #336]	; (8004c58 <_printf_i+0x244>)
 8004b08:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2308      	moveq	r3, #8
 8004b0e:	230a      	movne	r3, #10
 8004b10:	2100      	movs	r1, #0
 8004b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b16:	6866      	ldr	r6, [r4, #4]
 8004b18:	60a6      	str	r6, [r4, #8]
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	bfa2      	ittt	ge
 8004b1e:	6821      	ldrge	r1, [r4, #0]
 8004b20:	f021 0104 	bicge.w	r1, r1, #4
 8004b24:	6021      	strge	r1, [r4, #0]
 8004b26:	b90d      	cbnz	r5, 8004b2c <_printf_i+0x118>
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	d04d      	beq.n	8004bc8 <_printf_i+0x1b4>
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b32:	fb03 5711 	mls	r7, r3, r1, r5
 8004b36:	5dc7      	ldrb	r7, [r0, r7]
 8004b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b3c:	462f      	mov	r7, r5
 8004b3e:	42bb      	cmp	r3, r7
 8004b40:	460d      	mov	r5, r1
 8004b42:	d9f4      	bls.n	8004b2e <_printf_i+0x11a>
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10b      	bne.n	8004b60 <_printf_i+0x14c>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	07df      	lsls	r7, r3, #31
 8004b4c:	d508      	bpl.n	8004b60 <_printf_i+0x14c>
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	6861      	ldr	r1, [r4, #4]
 8004b52:	4299      	cmp	r1, r3
 8004b54:	bfde      	ittt	le
 8004b56:	2330      	movle	r3, #48	; 0x30
 8004b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b5c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004b60:	1b92      	subs	r2, r2, r6
 8004b62:	6122      	str	r2, [r4, #16]
 8004b64:	f8cd a000 	str.w	sl, [sp]
 8004b68:	464b      	mov	r3, r9
 8004b6a:	aa03      	add	r2, sp, #12
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4640      	mov	r0, r8
 8004b70:	f7ff fee2 	bl	8004938 <_printf_common>
 8004b74:	3001      	adds	r0, #1
 8004b76:	d14c      	bne.n	8004c12 <_printf_i+0x1fe>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b7c:	b004      	add	sp, #16
 8004b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b82:	4835      	ldr	r0, [pc, #212]	; (8004c58 <_printf_i+0x244>)
 8004b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	680e      	ldr	r6, [r1, #0]
 8004b8c:	061f      	lsls	r7, r3, #24
 8004b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b92:	600e      	str	r6, [r1, #0]
 8004b94:	d514      	bpl.n	8004bc0 <_printf_i+0x1ac>
 8004b96:	07d9      	lsls	r1, r3, #31
 8004b98:	bf44      	itt	mi
 8004b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b9e:	6023      	strmi	r3, [r4, #0]
 8004ba0:	b91d      	cbnz	r5, 8004baa <_printf_i+0x196>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f023 0320 	bic.w	r3, r3, #32
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	2310      	movs	r3, #16
 8004bac:	e7b0      	b.n	8004b10 <_printf_i+0xfc>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	2378      	movs	r3, #120	; 0x78
 8004bb8:	4828      	ldr	r0, [pc, #160]	; (8004c5c <_printf_i+0x248>)
 8004bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bbe:	e7e3      	b.n	8004b88 <_printf_i+0x174>
 8004bc0:	065e      	lsls	r6, r3, #25
 8004bc2:	bf48      	it	mi
 8004bc4:	b2ad      	uxthmi	r5, r5
 8004bc6:	e7e6      	b.n	8004b96 <_printf_i+0x182>
 8004bc8:	4616      	mov	r6, r2
 8004bca:	e7bb      	b.n	8004b44 <_printf_i+0x130>
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	6826      	ldr	r6, [r4, #0]
 8004bd0:	6960      	ldr	r0, [r4, #20]
 8004bd2:	1d1d      	adds	r5, r3, #4
 8004bd4:	600d      	str	r5, [r1, #0]
 8004bd6:	0635      	lsls	r5, r6, #24
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	d501      	bpl.n	8004be0 <_printf_i+0x1cc>
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <_printf_i+0x1d2>
 8004be0:	0671      	lsls	r1, r6, #25
 8004be2:	d5fb      	bpl.n	8004bdc <_printf_i+0x1c8>
 8004be4:	8018      	strh	r0, [r3, #0]
 8004be6:	2300      	movs	r3, #0
 8004be8:	6123      	str	r3, [r4, #16]
 8004bea:	4616      	mov	r6, r2
 8004bec:	e7ba      	b.n	8004b64 <_printf_i+0x150>
 8004bee:	680b      	ldr	r3, [r1, #0]
 8004bf0:	1d1a      	adds	r2, r3, #4
 8004bf2:	600a      	str	r2, [r1, #0]
 8004bf4:	681e      	ldr	r6, [r3, #0]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7fb fae8 	bl	80001d0 <memchr>
 8004c00:	b108      	cbz	r0, 8004c06 <_printf_i+0x1f2>
 8004c02:	1b80      	subs	r0, r0, r6
 8004c04:	6060      	str	r0, [r4, #4]
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c10:	e7a8      	b.n	8004b64 <_printf_i+0x150>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	4632      	mov	r2, r6
 8004c16:	4649      	mov	r1, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	47d0      	blx	sl
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d0ab      	beq.n	8004b78 <_printf_i+0x164>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	079b      	lsls	r3, r3, #30
 8004c24:	d413      	bmi.n	8004c4e <_printf_i+0x23a>
 8004c26:	68e0      	ldr	r0, [r4, #12]
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	bfb8      	it	lt
 8004c2e:	4618      	movlt	r0, r3
 8004c30:	e7a4      	b.n	8004b7c <_printf_i+0x168>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4632      	mov	r2, r6
 8004c36:	4649      	mov	r1, r9
 8004c38:	4640      	mov	r0, r8
 8004c3a:	47d0      	blx	sl
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d09b      	beq.n	8004b78 <_printf_i+0x164>
 8004c40:	3501      	adds	r5, #1
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	9903      	ldr	r1, [sp, #12]
 8004c46:	1a5b      	subs	r3, r3, r1
 8004c48:	42ab      	cmp	r3, r5
 8004c4a:	dcf2      	bgt.n	8004c32 <_printf_i+0x21e>
 8004c4c:	e7eb      	b.n	8004c26 <_printf_i+0x212>
 8004c4e:	2500      	movs	r5, #0
 8004c50:	f104 0619 	add.w	r6, r4, #25
 8004c54:	e7f5      	b.n	8004c42 <_printf_i+0x22e>
 8004c56:	bf00      	nop
 8004c58:	08004eed 	.word	0x08004eed
 8004c5c:	08004efe 	.word	0x08004efe

08004c60 <_sbrk_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_sbrk_r+0x1c>)
 8004c64:	2300      	movs	r3, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fc f8aa 	bl	8000dc4 <_sbrk>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_sbrk_r+0x1a>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_sbrk_r+0x1a>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000178 	.word	0x20000178

08004c80 <__sread>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	460c      	mov	r4, r1
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	f000 f8a0 	bl	8004dcc <_read_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	bfab      	itete	ge
 8004c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c92:	89a3      	ldrhlt	r3, [r4, #12]
 8004c94:	181b      	addge	r3, r3, r0
 8004c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c9a:	bfac      	ite	ge
 8004c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c9e:	81a3      	strhlt	r3, [r4, #12]
 8004ca0:	bd10      	pop	{r4, pc}

08004ca2 <__swrite>:
 8004ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	461f      	mov	r7, r3
 8004ca8:	898b      	ldrh	r3, [r1, #12]
 8004caa:	05db      	lsls	r3, r3, #23
 8004cac:	4605      	mov	r5, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	d505      	bpl.n	8004cc0 <__swrite+0x1e>
 8004cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f000 f868 	bl	8004d90 <_lseek_r>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	4632      	mov	r2, r6
 8004cce:	463b      	mov	r3, r7
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	f000 b817 	b.w	8004d08 <_write_r>

08004cda <__sseek>:
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	460c      	mov	r4, r1
 8004cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce2:	f000 f855 	bl	8004d90 <_lseek_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	bf15      	itete	ne
 8004cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cf6:	81a3      	strheq	r3, [r4, #12]
 8004cf8:	bf18      	it	ne
 8004cfa:	81a3      	strhne	r3, [r4, #12]
 8004cfc:	bd10      	pop	{r4, pc}

08004cfe <__sclose>:
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	f000 b813 	b.w	8004d2c <_close_r>
	...

08004d08 <_write_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d07      	ldr	r5, [pc, #28]	; (8004d28 <_write_r+0x20>)
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	2200      	movs	r2, #0
 8004d14:	602a      	str	r2, [r5, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f7fc f803 	bl	8000d22 <_write>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_write_r+0x1e>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_write_r+0x1e>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	20000178 	.word	0x20000178

08004d2c <_close_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d06      	ldr	r5, [pc, #24]	; (8004d48 <_close_r+0x1c>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fc f80f 	bl	8000d5a <_close>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_close_r+0x1a>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_close_r+0x1a>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000178 	.word	0x20000178

08004d4c <_fstat_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d07      	ldr	r5, [pc, #28]	; (8004d6c <_fstat_r+0x20>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	f7fc f80a 	bl	8000d72 <_fstat>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d102      	bne.n	8004d68 <_fstat_r+0x1c>
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	b103      	cbz	r3, 8004d68 <_fstat_r+0x1c>
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000178 	.word	0x20000178

08004d70 <_isatty_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4d06      	ldr	r5, [pc, #24]	; (8004d8c <_isatty_r+0x1c>)
 8004d74:	2300      	movs	r3, #0
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	f7fc f809 	bl	8000d92 <_isatty>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_isatty_r+0x1a>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_isatty_r+0x1a>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	20000178 	.word	0x20000178

08004d90 <_lseek_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d07      	ldr	r5, [pc, #28]	; (8004db0 <_lseek_r+0x20>)
 8004d94:	4604      	mov	r4, r0
 8004d96:	4608      	mov	r0, r1
 8004d98:	4611      	mov	r1, r2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	602a      	str	r2, [r5, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f7fc f802 	bl	8000da8 <_lseek>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d102      	bne.n	8004dae <_lseek_r+0x1e>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	b103      	cbz	r3, 8004dae <_lseek_r+0x1e>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	20000178 	.word	0x20000178

08004db4 <__malloc_lock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__malloc_lock+0x8>)
 8004db6:	f7ff bb55 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004dba:	bf00      	nop
 8004dbc:	20000170 	.word	0x20000170

08004dc0 <__malloc_unlock>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	; (8004dc8 <__malloc_unlock+0x8>)
 8004dc2:	f7ff bb50 	b.w	8004466 <__retarget_lock_release_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	20000170 	.word	0x20000170

08004dcc <_read_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d07      	ldr	r5, [pc, #28]	; (8004dec <_read_r+0x20>)
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fb ff84 	bl	8000ce8 <_read>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_read_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_read_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000178 	.word	0x20000178

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
