
implantFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d30  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002f14  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e112  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eef  00000000  00000000  0002e14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  00030bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d39  00000000  00000000  00031638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d255  00000000  00000000  00033371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf085  00000000  00000000  000405c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  000ff6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ea4 	.word	0x08002ea4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002ea4 	.word	0x08002ea4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ce:	b093      	sub	sp, #76	; 0x4c
 80001d0:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb12 	bl	80007fa <HAL_Init>
  /* USER CODE BEGIN Init */
  uint16_t raw;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f843 	bl	8000260 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f94d 	bl	8000478 <MX_GPIO_Init>
  MX_RTC_Init();
 80001de:	f000 f8e5 	bl	80003ac <MX_RTC_Init>
  MX_I2C1_Init();
 80001e2:	f000 f8a5 	bl	8000330 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  static const uint16_t REG_DATA = 0x2;
  uint8_t data = 0x3;
 80001e6:	2303      	movs	r3, #3
 80001e8:	70fb      	strb	r3, [r7, #3]

  //NFC_WriteToUserAddress(&ret, hi2c1, REG_DATA, data);
  //HAL_Delay(100);


  for(int i = 0; i<30; i++){
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00d      	b.n	800020c <main+0x40>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	4819      	ldr	r0, [pc, #100]	; (8000258 <main+0x8c>)
 80001f4:	f000 fe2e 	bl	8000e54 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	4817      	ldr	r0, [pc, #92]	; (8000258 <main+0x8c>)
 80001fc:	f000 fe2a 	bl	8000e54 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000200:	2064      	movs	r0, #100	; 0x64
 8000202:	f000 fb6f 	bl	80008e4 <HAL_Delay>
  for(int i = 0; i<30; i++){
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	3301      	adds	r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2b1d      	cmp	r3, #29
 8000210:	ddee      	ble.n	80001f0 <main+0x24>
	// stm32l_lowPowerSetup(1000, &hrtc);
	//  HAL_Delay(2000);
	  //HAL_ADC_Start(&hadc1);
	  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	  //raw = HAL_ADC_GetValue(&hadc1);
	  NFC_EnableEH(&ret, hi2c1);
 8000212:	4e12      	ldr	r6, [pc, #72]	; (800025c <main+0x90>)
 8000214:	f107 0c02 	add.w	ip, r7, #2
 8000218:	466d      	mov	r5, sp
 800021a:	f106 040c 	add.w	r4, r6, #12
 800021e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800022a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800022e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000232:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000236:	4660      	mov	r0, ip
 8000238:	f000 f97a 	bl	8000530 <NFC_EnableEH>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <main+0x8c>)
 8000240:	f000 fe08 	bl	8000e54 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	4804      	ldr	r0, [pc, #16]	; (8000258 <main+0x8c>)
 8000248:	f000 fe04 	bl	8000e54 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 800024c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000250:	f000 fb48 	bl	80008e4 <HAL_Delay>
	  NFC_EnableEH(&ret, hi2c1);
 8000254:	e7dd      	b.n	8000212 <main+0x46>
 8000256:	bf00      	nop
 8000258:	48000400 	.word	0x48000400
 800025c:	20000028 	.word	0x20000028

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b0ac      	sub	sp, #176	; 0xb0
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800026a:	2244      	movs	r2, #68	; 0x44
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fe10 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2254      	movs	r2, #84	; 0x54
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fe02 	bl	8002e94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000290:	2318      	movs	r3, #24
 8000292:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a6:	2360      	movs	r3, #96	; 0x60
 80002a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 f9da 	bl	8001670 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c2:	f000 f92f 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fde5 	bl	8001eb0 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002ec:	f000 f91a 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SystemClock_Config+0xcc>)
 80002f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f001 ffa3 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800030c:	f000 f90a 	bl	8000524 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000310:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000314:	f001 f956 	bl	80015c4 <HAL_PWREx_ControlVoltageScaling>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800031e:	f000 f901 	bl	8000524 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	37b0      	adds	r7, #176	; 0xb0
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	00020040 	.word	0x00020040

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_I2C1_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_I2C1_Init+0x74>)
 800033c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000340:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_I2C1_Init+0x74>)
 800034a:	2201      	movs	r2, #1
 800034c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <MX_I2C1_Init+0x74>)
 800036e:	f000 fd8b 	bl	8000e88 <HAL_I2C_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000378:	f000 f8d4 	bl	8000524 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037c:	2100      	movs	r1, #0
 800037e:	4809      	ldr	r0, [pc, #36]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000380:	f001 f87a 	bl	8001478 <HAL_I2CEx_ConfigAnalogFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800038a:	f000 f8cb 	bl	8000524 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000392:	f001 f8bc 	bl	800150e <HAL_I2CEx_ConfigDigitalFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800039c:	f000 f8c2 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40005400 	.word	0x40005400

080003ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80003c0:	2300      	movs	r3, #0
 80003c2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003c4:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_RTC_Init+0xc4>)
 80003c6:	4a2b      	ldr	r2, [pc, #172]	; (8000474 <MX_RTC_Init+0xc8>)
 80003c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003ca:	4b29      	ldr	r3, [pc, #164]	; (8000470 <MX_RTC_Init+0xc4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003d0:	4b27      	ldr	r3, [pc, #156]	; (8000470 <MX_RTC_Init+0xc4>)
 80003d2:	227f      	movs	r2, #127	; 0x7f
 80003d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003d6:	4b26      	ldr	r3, [pc, #152]	; (8000470 <MX_RTC_Init+0xc4>)
 80003d8:	22ff      	movs	r2, #255	; 0xff
 80003da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <MX_RTC_Init+0xc4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003e2:	4b23      	ldr	r3, [pc, #140]	; (8000470 <MX_RTC_Init+0xc4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <MX_RTC_Init+0xc4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003ee:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_RTC_Init+0xc4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003f4:	481e      	ldr	r0, [pc, #120]	; (8000470 <MX_RTC_Init+0xc4>)
 80003f6:	f002 fa0f 	bl	8002818 <HAL_RTC_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000400:	f000 f890 	bl	8000524 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000404:	2300      	movs	r3, #0
 8000406:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000408:	2300      	movs	r3, #0
 800040a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800040c:	2300      	movs	r3, #0
 800040e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	4814      	ldr	r0, [pc, #80]	; (8000470 <MX_RTC_Init+0xc4>)
 8000420:	f002 fa75 	bl	800290e <HAL_RTC_SetTime>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800042a:	f000 f87b 	bl	8000524 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800042e:	2301      	movs	r3, #1
 8000430:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000432:	2301      	movs	r3, #1
 8000434:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000436:	2301      	movs	r3, #1
 8000438:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800043a:	2300      	movs	r3, #0
 800043c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	2201      	movs	r2, #1
 8000442:	4619      	mov	r1, r3
 8000444:	480a      	ldr	r0, [pc, #40]	; (8000470 <MX_RTC_Init+0xc4>)
 8000446:	f002 faff 	bl	8002a48 <HAL_RTC_SetDate>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000450:	f000 f868 	bl	8000524 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_RTC_Init+0xc4>)
 800045a:	f002 fc33 	bl	8002cc4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000464:	f000 f85e 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000074 	.word	0x20000074
 8000474:	40002800 	.word	0x40002800

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <MX_GPIO_Init+0xa4>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a22      	ldr	r2, [pc, #136]	; (800051c <MX_GPIO_Init+0xa4>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_GPIO_Init+0xa4>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <MX_GPIO_Init+0xa4>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <MX_GPIO_Init+0xa4>)
 80004ac:	f043 0302 	orr.w	r3, r3, #2
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <MX_GPIO_Init+0xa4>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0302 	and.w	r3, r3, #2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 fcac 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	21c0      	movs	r1, #192	; 0xc0
 80004d0:	4813      	ldr	r0, [pc, #76]	; (8000520 <MX_GPIO_Init+0xa8>)
 80004d2:	f000 fca7 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fb2d 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004f6:	23c0      	movs	r3, #192	; 0xc0
 80004f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	4619      	mov	r1, r3
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <MX_GPIO_Init+0xa8>)
 800050e:	f000 fb1f 	bl	8000b50 <HAL_GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	48000400 	.word	0x48000400

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <NFC_EnableEH>:
	return 1;

}


int NFC_EnableEH(HAL_StatusTypeDef *ret, I2C_HandleTypeDef i2c){
 8000530:	b084      	sub	sp, #16
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af02      	add	r7, sp, #8
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	f107 001c 	add.w	r0, r7, #28
 800053e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const uint8_t st25dv_ADDR = 0b10100110;
	uint16_t address = 0x2002;
 8000542:	f242 0302 	movw	r3, #8194	; 0x2002
 8000546:	81fb      	strh	r3, [r7, #14]
	uint8_t buf[3];
	buf[0] = (address & (uint16_t)0xFF00)/256; // most significant byte
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800054e:	2b00      	cmp	r3, #0
 8000550:	da00      	bge.n	8000554 <NFC_EnableEH+0x24>
 8000552:	33ff      	adds	r3, #255	; 0xff
 8000554:	121b      	asrs	r3, r3, #8
 8000556:	b2db      	uxtb	r3, r3
 8000558:	723b      	strb	r3, [r7, #8]
	buf[1] = (address & (uint16_t)0x00FF); // least significan byte
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	727b      	strb	r3, [r7, #9]
	buf[2] = 0x0F;
 8000560:	230f      	movs	r3, #15
 8000562:	72bb      	strb	r3, [r7, #10]

	*ret = HAL_I2C_Master_Transmit(&i2c, st25dv_ADDR, buf, 3, HAL_MAX_DELAY);
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <NFC_EnableEH+0x74>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b299      	uxth	r1, r3
 800056a:	f107 0208 	add.w	r2, r7, #8
 800056e:	f107 001c 	add.w	r0, r7, #28
 8000572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2303      	movs	r3, #3
 800057a:	f000 fd15 	bl	8000fa8 <HAL_I2C_Master_Transmit>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	701a      	strb	r2, [r3, #0]
		  if ( *ret != HAL_OK ) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <NFC_EnableEH+0x62>
		        //printf("Error Tx\r\n");
		        return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <NFC_EnableEH+0x64>
		  } else{
			  //printf("success \n");
			  return 0;
 8000592:	2300      	movs	r3, #0
		  }

}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059e:	b004      	add	sp, #16
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	08002ebc 	.word	0x08002ebc

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_MspInit+0x54>)
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <HAL_MspInit+0x54>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_MspInit+0x54>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <HAL_MspInit+0x54>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <HAL_MspInit+0x54>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_MspInit+0x54>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80005de:	2006      	movs	r0, #6
 80005e0:	f000 fa74 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	2005      	movs	r0, #5
 80005ea:	f000 fa7a 	bl	8000ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80005ee:	2005      	movs	r0, #5
 80005f0:	f000 fa93 	bl	8000b1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <HAL_I2C_MspInit+0x80>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d129      	bne.n	8000676 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <HAL_I2C_MspInit+0x84>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_I2C_MspInit+0x84>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_I2C_MspInit+0x84>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800063a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000640:	2312      	movs	r3, #18
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800064c:	2304      	movs	r3, #4
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f000 fa79 	bl	8000b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_I2C_MspInit+0x84>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_I2C_MspInit+0x84>)
 8000664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000668:	6593      	str	r3, [r2, #88]	; 0x58
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_I2C_MspInit+0x84>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40005400 	.word	0x40005400
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <HAL_RTC_MspInit+0x3c>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d10f      	bne.n	80006ba <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_RTC_MspInit+0x40>)
 800069c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <HAL_RTC_MspInit+0x40>)
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2003      	movs	r0, #3
 80006b0:	f000 fa17 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 fa30 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40002800 	.word	0x40002800
 80006c8:	40021000 	.word	0x40021000

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f8c4 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <RTC_WKUP_IRQHandler+0x10>)
 8000726:	f002 fb61 	bl	8002dec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000074 	.word	0x20000074

08000734 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x5c>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x5c>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <SystemInit+0x60>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <SystemInit+0x60>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <SystemInit+0x60>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <SystemInit+0x60>)
 8000770:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000774:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000778:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <SystemInit+0x60>)
 800077c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000780:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SystemInit+0x60>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <SystemInit+0x60>)
 8000788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800078c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SystemInit+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	40021000 	.word	0x40021000

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff ffca 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007b2:	e003      	b.n	80007bc <LoopCopyDataInit>

080007b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ba:	3104      	adds	r1, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80007c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007c4:	d3f6      	bcc.n	80007b4 <CopyDataInit>
	ldr	r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c8:	e002      	b.n	80007d0 <LoopFillZerobss>

080007ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007cc:	f842 3b04 	str.w	r3, [r2], #4

080007d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <LoopForever+0x16>)
	cmp	r2, r3
 80007d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007d4:	d3f9      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f002 fb39 	bl	8002e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fcf7 	bl	80001cc <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007e0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80007e4:	08002f08 	.word	0x08002f08
	ldr	r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007ec:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80007f0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80007f4:	2000009c 	.word	0x2000009c

080007f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_IRQHandler>

080007fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f961 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f80e 	bl	800082c <HAL_InitTick>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e001      	b.n	8000820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081c:	f7ff fec4 	bl	80005a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_InitTick+0x6c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d023      	beq.n	8000888 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_InitTick+0x70>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_InitTick+0x6c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f96d 	bl	8000b36 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10f      	bne.n	8000882 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d809      	bhi.n	800087c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000870:	f000 f937 	bl	8000ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_InitTick+0x74>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e007      	b.n	800088c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e004      	b.n	800088c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e001      	b.n	800088c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000098 	.word	0x20000098

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000098 	.word	0x20000098

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff ffee 	bl	80008cc <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_Delay+0x44>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffde 	bl	80008cc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <__NVIC_EnableIRQ+0x38>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f7ff ff8e 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff29 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff3e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff8e 	bl	8000a20 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff31 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffa2 	bl	8000a88 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5e:	e148      	b.n	8000df2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 813a 	beq.w	8000dec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d00b      	beq.n	8000b98 <HAL_GPIO_Init+0x48>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d007      	beq.n	8000b98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b8c:	2b11      	cmp	r3, #17
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b12      	cmp	r3, #18
 8000b96:	d130      	bne.n	8000bfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	f003 0201 	and.w	r2, r3, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0xea>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d123      	bne.n	8000c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	08da      	lsrs	r2, r3, #3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	6939      	ldr	r1, [r7, #16]
 8000c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0203 	and.w	r2, r3, #3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 8094 	beq.w	8000dec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	4a51      	ldr	r2, [pc, #324]	; (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cdc:	4a4d      	ldr	r2, [pc, #308]	; (8000e14 <HAL_GPIO_Init+0x2c4>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1d4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a43      	ldr	r2, [pc, #268]	; (8000e18 <HAL_GPIO_Init+0x2c8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1d0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <HAL_GPIO_Init+0x2cc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1cc>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1d6>
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1d6>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1d6>
 8000d24:	2300      	movs	r3, #0
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d36:	4937      	ldr	r1, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2c4>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d44:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d68:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dbc:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f aeaf 	bne.w	8000b60 <HAL_GPIO_Init+0x10>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	40010400 	.word	0x40010400

08000e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
 8000e30:	4613      	mov	r3, r2
 8000e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e34:	787b      	ldrb	r3, [r7, #1]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	041a      	lsls	r2, r3, #16
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43d9      	mvns	r1, r3
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	400b      	ands	r3, r1
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e081      	b.n	8000f9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d106      	bne.n	8000eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fba6 	bl	8000600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2224      	movs	r2, #36	; 0x24
 8000eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d107      	bne.n	8000f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e006      	b.n	8000f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d104      	bne.n	8000f22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	ea42 0103 	orr.w	r1, r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	021a      	lsls	r2, r3, #8
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69d9      	ldr	r1, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	817b      	strh	r3, [r7, #10]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	f040 80da 	bne.w	800117e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_I2C_Master_Transmit+0x30>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e0d3      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fc74 	bl	80008cc <HAL_GetTick>
 8000fe4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2319      	movs	r3, #25
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 f8f0 	bl	80011d8 <I2C_WaitOnFlagUntilTimeout>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0be      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2221      	movs	r2, #33	; 0x21
 8001006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2210      	movs	r2, #16
 800100e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	893a      	ldrh	r2, [r7, #8]
 8001022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800102e:	b29b      	uxth	r3, r3
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d90e      	bls.n	8001052 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800103e:	b2da      	uxtb	r2, r3
 8001040:	8979      	ldrh	r1, [r7, #10]
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_I2C_Master_Transmit+0x1e0>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f9e6 	bl	800141c <I2C_TransferConfig>
 8001050:	e06c      	b.n	800112c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001056:	b29a      	uxth	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	b2da      	uxtb	r2, r3
 8001062:	8979      	ldrh	r1, [r7, #10]
 8001064:	4b48      	ldr	r3, [pc, #288]	; (8001188 <HAL_I2C_Master_Transmit+0x1e0>)
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f9d5 	bl	800141c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001072:	e05b      	b.n	800112c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	6a39      	ldr	r1, [r7, #32]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 f8ed 	bl	8001258 <I2C_WaitOnTXISFlagUntilTimeout>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e07b      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d034      	beq.n	800112c <HAL_I2C_Master_Transmit+0x184>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d130      	bne.n	800112c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f87f 	bl	80011d8 <I2C_WaitOnFlagUntilTimeout>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e04d      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d90e      	bls.n	800110c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	22ff      	movs	r2, #255	; 0xff
 80010f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 f989 	bl	800141c <I2C_TransferConfig>
 800110a:	e00f      	b.n	800112c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111a:	b2da      	uxtb	r2, r3
 800111c:	8979      	ldrh	r1, [r7, #10]
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f978 	bl	800141c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d19e      	bne.n	8001074 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	6a39      	ldr	r1, [r7, #32]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f8cc 	bl	80012d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e01a      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_I2C_Master_Transmit+0x1e4>)
 800115e:	400b      	ands	r3, r1
 8001160:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2220      	movs	r2, #32
 8001166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800117e:	2302      	movs	r3, #2
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	80002000 	.word	0x80002000
 800118c:	fe00e800 	.word	0xfe00e800

08001190 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d103      	bne.n	80011ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d007      	beq.n	80011cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	619a      	str	r2, [r3, #24]
  }
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011e8:	e022      	b.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f0:	d01e      	beq.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f2:	f7ff fb6b 	bl	80008cc <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d302      	bcc.n	8001208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d113      	bne.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f043 0220 	orr.w	r2, r3, #32
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2220      	movs	r2, #32
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00f      	b.n	8001250 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4013      	ands	r3, r2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	429a      	cmp	r2, r3
 800124c:	d0cd      	beq.n	80011ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001264:	e02c      	b.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f870 	bl	8001350 <I2C_IsAcknowledgeFailed>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e02a      	b.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d01e      	beq.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001282:	f7ff fb23 	bl	80008cc <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	429a      	cmp	r2, r3
 8001290:	d302      	bcc.n	8001298 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d113      	bne.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e007      	b.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d1cb      	bne.n	8001266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e4:	e028      	b.n	8001338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f830 	bl	8001350 <I2C_IsAcknowledgeFailed>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e026      	b.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012fa:	f7ff fae7 	bl	80008cc <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	429a      	cmp	r2, r3
 8001308:	d302      	bcc.n	8001310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d113      	bne.n	8001338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2220      	movs	r2, #32
 8001320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e007      	b.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b20      	cmp	r3, #32
 8001344:	d1cf      	bne.n	80012e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b10      	cmp	r3, #16
 8001368:	d151      	bne.n	800140e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800136a:	e022      	b.n	80013b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001372:	d01e      	beq.n	80013b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001374:	f7ff faaa 	bl	80008cc <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	d302      	bcc.n	800138a <I2C_IsAcknowledgeFailed+0x3a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d113      	bne.n	80013b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0220 	orr.w	r2, r3, #32
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e02e      	b.n	8001410 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d1d5      	bne.n	800136c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2210      	movs	r2, #16
 80013c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2220      	movs	r2, #32
 80013ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fedd 	bl	8001190 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <I2C_IsAcknowledgeFailed+0xc8>)
 80013e2:	400b      	ands	r3, r1
 80013e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f043 0204 	orr.w	r2, r3, #4
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	fe00e800 	.word	0xfe00e800

0800141c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	817b      	strh	r3, [r7, #10]
 800142a:	4613      	mov	r3, r2
 800142c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	0d5b      	lsrs	r3, r3, #21
 8001438:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <I2C_TransferConfig+0x58>)
 800143e:	430b      	orrs	r3, r1
 8001440:	43db      	mvns	r3, r3
 8001442:	ea02 0103 	and.w	r1, r2, r3
 8001446:	897b      	ldrh	r3, [r7, #10]
 8001448:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800144c:	7a7b      	ldrb	r3, [r7, #9]
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	431a      	orrs	r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	03ff63ff 	.word	0x03ff63ff

08001478 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d138      	bne.n	8001500 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001498:	2302      	movs	r3, #2
 800149a:	e032      	b.n	8001502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001500:	2302      	movs	r3, #2
  }
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b20      	cmp	r3, #32
 8001522:	d139      	bne.n	8001598 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800152e:	2302      	movs	r3, #2
 8001530:	e033      	b.n	800159a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2224      	movs	r2, #36	; 0x24
 800153e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001560:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d2:	d130      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e0:	d038      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2232      	movs	r2, #50	; 0x32
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001608:	e002      	b.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3b01      	subs	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d102      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x60>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f2      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d110      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e00f      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d007      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f000 bc11 	b.w	8001ea6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001684:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168e:	4b9e      	ldr	r3, [pc, #632]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80e4 	beq.w	800186e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_RCC_OscConfig+0x4c>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f040 808b 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 8087 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016bc:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x64>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e3e8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_RCC_OscConfig+0x7e>
 80016e4:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ec:	e005      	b.n	80016fa <HAL_RCC_OscConfig+0x8a>
 80016ee:	4b86      	ldr	r3, [pc, #536]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d223      	bcs.n	8001746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd42 	bl	800218c <RCC_SetFlashLatencyFromMSIRange>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e3c9      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7c      	ldr	r2, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4977      	ldr	r1, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b75      	ldr	r3, [pc, #468]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	4972      	ldr	r1, [pc, #456]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e025      	b.n	8001792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	4b70      	ldr	r3, [pc, #448]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6f      	ldr	r2, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	496a      	ldr	r1, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	4965      	ldr	r1, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd02 	bl	800218c <RCC_SetFlashLatencyFromMSIRange>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e389      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001792:	f000 fc6f 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8001796:	4602      	mov	r2, r0
 8001798:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	495a      	ldr	r1, [pc, #360]	; (800190c <HAL_RCC_OscConfig+0x29c>)
 80017a4:	5ccb      	ldrb	r3, [r1, r3]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x2a0>)
 80017b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b2:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x2a4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f838 	bl	800082c <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d052      	beq.n	800186c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	e36d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d032      	beq.n	8001838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d2:	4b4d      	ldr	r3, [pc, #308]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a4c      	ldr	r2, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017de:	f7ff f875 	bl	80008cc <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e6:	f7ff f871 	bl	80008cc <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e356      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b40      	ldr	r3, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3f      	ldr	r2, [pc, #252]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	493a      	ldr	r1, [pc, #232]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	4935      	ldr	r1, [pc, #212]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e01a      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001838:	4b33      	ldr	r3, [pc, #204]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a32      	ldr	r2, [pc, #200]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001844:	f7ff f842 	bl	80008cc <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184c:	f7ff f83e 	bl	80008cc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e323      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1dc>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d073      	beq.n	8001962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x21c>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d10e      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d063      	beq.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d15f      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e300      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x24c>
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0x288>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x270>
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x288>
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a05      	ldr	r2, [pc, #20]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7fe ffe4 	bl	80008cc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	e010      	b.n	800192a <HAL_RCC_OscConfig+0x2ba>
 8001908:	40021000 	.word	0x40021000
 800190c:	08002ec0 	.word	0x08002ec0
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7fe ffd8 	bl	80008cc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e2bd      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4baf      	ldr	r3, [pc, #700]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2a8>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7fe ffc8 	bl	80008cc <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7fe ffc4 	bl	80008cc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e2a9      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	4ba5      	ldr	r3, [pc, #660]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d0>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d060      	beq.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x310>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d119      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b99      	ldr	r3, [pc, #612]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x328>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e286      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b93      	ldr	r3, [pc, #588]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4990      	ldr	r1, [pc, #576]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	e040      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b6:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8b      	ldr	r2, [pc, #556]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7fe ff83 	bl	80008cc <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7fe ff7f 	bl	80008cc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e264      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	497c      	ldr	r1, [pc, #496]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7fe ff5f 	bl	80008cc <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7fe ff5b 	bl	80008cc <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e240      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	4a67      	ldr	r2, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7fe ff3a 	bl	80008cc <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7fe ff36 	bl	80008cc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e21b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ef      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3ec>
 8001a7c:	e01b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7fe ff1d 	bl	80008cc <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7fe ff19 	bl	80008cc <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1fe      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ef      	bne.n	8001a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d118      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afc:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b08:	f7fe fee0 	bl	80008cc <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7fe fedc 	bl	80008cc <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1c1      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4d8>
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	e024      	b.n	8001b92 <HAL_RCC_OscConfig+0x522>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d110      	bne.n	8001b72 <HAL_RCC_OscConfig+0x502>
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e00f      	b.n	8001b92 <HAL_RCC_OscConfig+0x522>
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	f023 0304 	bic.w	r3, r3, #4
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7fe fe97 	bl	80008cc <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe fe93 	bl	80008cc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e176      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ed      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x532>
 8001bc6:	e01a      	b.n	8001bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7fe fe80 	bl	80008cc <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bce:	e00f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7fe fe7c 	bl	80008cc <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d906      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e15f      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	4baa      	ldr	r3, [pc, #680]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1e8      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4ba5      	ldr	r3, [pc, #660]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4aa4      	ldr	r2, [pc, #656]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c24:	4b9d      	ldr	r3, [pc, #628]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	4a9c      	ldr	r2, [pc, #624]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7fe fe4a 	bl	80008cc <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7fe fe46 	bl	80008cc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e12b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4e:	4b93      	ldr	r3, [pc, #588]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ef      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5cc>
 8001c5c:	e01b      	b.n	8001c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5e:	4b8f      	ldr	r3, [pc, #572]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	4a8d      	ldr	r2, [pc, #564]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fe2d 	bl	80008cc <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7fe fe29 	bl	80008cc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e10e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c88:	4b84      	ldr	r3, [pc, #528]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ef      	bne.n	8001c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8102 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f040 80c5 	bne.w	8001e34 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001caa:	4b7c      	ldr	r3, [pc, #496]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d12c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d123      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d11b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d113      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d109      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d067      	beq.n	8001de8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d062      	beq.n	8001de4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0bb      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5a      	ldr	r2, [pc, #360]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3a:	f7fe fdc7 	bl	80008cc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7fe fdc3 	bl	80008cc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0a8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <HAL_RCC_OscConfig+0x830>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d82:	0852      	lsrs	r2, r2, #1
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0552      	lsls	r2, r2, #21
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d8e:	0852      	lsrs	r2, r2, #1
 8001d90:	3a01      	subs	r2, #1
 8001d92:	0652      	lsls	r2, r2, #25
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d9a:	06d2      	lsls	r2, r2, #27
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	493f      	ldr	r1, [pc, #252]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a3c      	ldr	r2, [pc, #240]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db0:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a39      	ldr	r2, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dbc:	f7fe fd86 	bl	80008cc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe fd82 	bl	80008cc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e067      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de2:	e05f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e05e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e0c:	f7fe fd5e 	bl	80008cc <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7fe fd5a 	bl	80008cc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e03f      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x7a4>
 8001e32:	e037      	b.n	8001ea4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d02d      	beq.n	8001e96 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e44:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e58:	f023 0303 	bic.w	r3, r3, #3
 8001e5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fd2d 	bl	80008cc <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fd29 	bl	80008cc <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e00e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x806>
 8001e94:	e006      	b.n	8001ea4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e005      	b.n	8001ea6 <HAL_RCC_OscConfig+0x836>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0c8      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b66      	ldr	r3, [pc, #408]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4961      	ldr	r1, [pc, #388]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b0      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d04c      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4b56      	ldr	r3, [pc, #344]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d121      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e09e      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d115      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e092      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e086      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e07e      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 0203 	bic.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	493f      	ldr	r1, [pc, #252]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fcaf 	bl	80008cc <HAL_GetTick>
 8001f6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7fe fcab 	bl	80008cc <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e066      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 020c 	and.w	r2, r3, #12
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d1eb      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	492c      	ldr	r1, [pc, #176]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d210      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4924      	ldr	r1, [pc, #144]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x1b0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e036      	b.n	8002056 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4918      	ldr	r1, [pc, #96]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4910      	ldr	r1, [pc, #64]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002026:	f000 f825 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_ClockConfig+0x1b4>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490c      	ldr	r1, [pc, #48]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fbee 	bl	800082c <HAL_InitTick>
 8002050:	4603      	mov	r3, r0
 8002052:	72fb      	strb	r3, [r7, #11]

  return status;
 8002054:	7afb      	ldrb	r3, [r7, #11]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40022000 	.word	0x40022000
 8002064:	40021000 	.word	0x40021000
 8002068:	08002ec0 	.word	0x08002ec0
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002082:	4b3e      	ldr	r3, [pc, #248]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x34>
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d11e      	bne.n	80020e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c4:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020d0:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10d      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e004      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_RCC_GetSysClockFreq+0x114>)
 80020fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d134      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0xa6>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d003      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0xac>
 8002118:	e005      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCC_GetSysClockFreq+0x110>)
 800211c:	617b      	str	r3, [r7, #20]
      break;
 800211e:	e005      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_GetSysClockFreq+0x114>)
 8002122:	617b      	str	r3, [r7, #20]
      break;
 8002124:	e002      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	617b      	str	r3, [r7, #20]
      break;
 800212a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	3301      	adds	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	fb02 f203 	mul.w	r2, r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_RCC_GetSysClockFreq+0x108>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	0e5b      	lsrs	r3, r3, #25
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	3301      	adds	r3, #1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800216c:	69bb      	ldr	r3, [r7, #24]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	08002ed0 	.word	0x08002ed0
 8002184:	00f42400 	.word	0x00f42400
 8002188:	007a1200 	.word	0x007a1200

0800218c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021a4:	f7ff fa00 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80021a8:	6178      	str	r0, [r7, #20]
 80021aa:	e014      	b.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a24      	ldr	r2, [pc, #144]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f9f0 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d10b      	bne.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d919      	bls.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2ba0      	cmp	r3, #160	; 0xa0
 80021e8:	d902      	bls.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ea:	2302      	movs	r3, #2
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e013      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e010      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d902      	bls.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021fc:	2303      	movs	r3, #3
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e00a      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b80      	cmp	r3, #128	; 0x80
 8002206:	d102      	bne.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e004      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b70      	cmp	r3, #112	; 0x70
 8002212:	d101      	bne.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002214:	2301      	movs	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 0207 	bic.w	r2, r3, #7
 8002220:	4909      	ldr	r1, [pc, #36]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002254:	2300      	movs	r3, #0
 8002256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002258:	2300      	movs	r3, #0
 800225a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d031      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002270:	d01a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002276:	d814      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800227c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002280:	d10f      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002282:	4bac      	ldr	r3, [pc, #688]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4aab      	ldr	r2, [pc, #684]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800228e:	e00c      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9cc 	bl	8002634 <RCCEx_PLLSAI1_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a0:	e003      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	74fb      	strb	r3, [r7, #19]
      break;
 80022a6:	e000      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80022a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022b0:	4ba0      	ldr	r3, [pc, #640]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	499d      	ldr	r1, [pc, #628]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022c6:	e001      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8099 	beq.w	800240c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022de:	4b95      	ldr	r3, [pc, #596]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f4:	4b8f      	ldr	r3, [pc, #572]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	4a8e      	ldr	r2, [pc, #568]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230c:	2301      	movs	r3, #1
 800230e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002310:	4b89      	ldr	r3, [pc, #548]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a88      	ldr	r2, [pc, #544]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800231c:	f7fe fad6 	bl	80008cc <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002322:	e009      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002324:	f7fe fad2 	bl	80008cc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d902      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	74fb      	strb	r3, [r7, #19]
        break;
 8002336:	e005      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002338:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ef      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d155      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002354:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01e      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	429a      	cmp	r2, r3
 8002364:	d019      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002366:	4b73      	ldr	r3, [pc, #460]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002382:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002392:	4a68      	ldr	r2, [pc, #416]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d016      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fa92 	bl	80008cc <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	e00b      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fa8e 	bl	80008cc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d902      	bls.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	74fb      	strb	r3, [r7, #19]
            break;
 80023c2:	e006      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c4:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ec      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	4953      	ldr	r1, [pc, #332]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ee:	e004      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
 80023f4:	e001      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fa:	7c7b      	ldrb	r3, [r7, #17]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002418:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4943      	ldr	r1, [pc, #268]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 020c 	bic.w	r2, r3, #12
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	493a      	ldr	r1, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	4932      	ldr	r1, [pc, #200]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	4929      	ldr	r1, [pc, #164]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	4921      	ldr	r1, [pc, #132]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	4918      	ldr	r1, [pc, #96]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4910      	ldr	r1, [pc, #64]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02c      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002524:	d10a      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a02      	ldr	r2, [pc, #8]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800252c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	e015      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002544:	d10c      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	2101      	movs	r1, #1
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f871 	bl	8002634 <RCCEx_PLLSAI1_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d028      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	492d      	ldr	r1, [pc, #180]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258a:	d106      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002596:	60d3      	str	r3, [r2, #12]
 8002598:	e011      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a2:	d10c      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	2101      	movs	r1, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f842 	bl	8002634 <RCCEx_PLLSAI1_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01c      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d8:	4915      	ldr	r1, [pc, #84]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2102      	movs	r1, #2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f81f 	bl	8002634 <RCCEx_PLLSAI1_Config>
 80025f6:	4603      	mov	r3, r0
 80025f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002626:	7cbb      	ldrb	r3, [r7, #18]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d018      	beq.n	8002680 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800264e:	4b71      	ldr	r3, [pc, #452]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0203 	and.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d10d      	bne.n	800267a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
       ||
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002666:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
       ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d047      	beq.n	800270a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e044      	b.n	800270a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d018      	beq.n	80026ba <RCCEx_PLLSAI1_Config+0x86>
 8002688:	2b03      	cmp	r3, #3
 800268a:	d825      	bhi.n	80026d8 <RCCEx_PLLSAI1_Config+0xa4>
 800268c:	2b01      	cmp	r3, #1
 800268e:	d002      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0x62>
 8002690:	2b02      	cmp	r3, #2
 8002692:	d009      	beq.n	80026a8 <RCCEx_PLLSAI1_Config+0x74>
 8002694:	e020      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002696:	4b5f      	ldr	r3, [pc, #380]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d11d      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a6:	e01a      	b.n	80026de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d116      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e013      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026d6:	e006      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e004      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026de:	bf00      	nop
 80026e0:	e002      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	430b      	orrs	r3, r1
 8002704:	4943      	ldr	r1, [pc, #268]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d17c      	bne.n	800280a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3f      	ldr	r2, [pc, #252]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800271a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fe f8d6 	bl	80008cc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002722:	e009      	b.n	8002738 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002724:	f7fe f8d2 	bl	80008cc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d902      	bls.n	8002738 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	73fb      	strb	r3, [r7, #15]
        break;
 8002736:	e005      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ef      	bne.n	8002724 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d15f      	bne.n	800280a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d110      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	0211      	lsls	r1, r2, #8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68d2      	ldr	r2, [r2, #12]
 8002766:	06d2      	lsls	r2, r2, #27
 8002768:	430a      	orrs	r2, r1
 800276a:	492a      	ldr	r1, [pc, #168]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	610b      	str	r3, [r1, #16]
 8002770:	e027      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d112      	bne.n	800279e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	0211      	lsls	r1, r2, #8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6912      	ldr	r2, [r2, #16]
 800278e:	0852      	lsrs	r2, r2, #1
 8002790:	3a01      	subs	r2, #1
 8002792:	0552      	lsls	r2, r2, #21
 8002794:	430a      	orrs	r2, r1
 8002796:	491f      	ldr	r1, [pc, #124]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	610b      	str	r3, [r1, #16]
 800279c:	e011      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6892      	ldr	r2, [r2, #8]
 80027ae:	0211      	lsls	r1, r2, #8
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6952      	ldr	r2, [r2, #20]
 80027b4:	0852      	lsrs	r2, r2, #1
 80027b6:	3a01      	subs	r2, #1
 80027b8:	0652      	lsls	r2, r2, #25
 80027ba:	430a      	orrs	r2, r1
 80027bc:	4915      	ldr	r1, [pc, #84]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe f87d 	bl	80008cc <HAL_GetTick>
 80027d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d4:	e009      	b.n	80027ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027d6:	f7fe f879 	bl	80008cc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d902      	bls.n	80027ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	73fb      	strb	r3, [r7, #15]
          break;
 80027e8:	e005      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ef      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4903      	ldr	r1, [pc, #12]	; (8002814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06c      	beq.n	8002904 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd ff22 	bl	8000688 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	22ca      	movs	r2, #202	; 0xca
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2253      	movs	r2, #83	; 0x53
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9a0 	bl	8002ba2 <RTC_EnterInitMode>
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d14b      	bne.n	8002904 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800287a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800287e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6899      	ldr	r1, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	041a      	lsls	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f9a3 	bl	8002c08 <RTC_ExitInitMode>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11b      	bne.n	8002904 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0203 	bic.w	r2, r2, #3
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800290e:	b590      	push	{r4, r7, lr}
 8002910:	b087      	sub	sp, #28
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_RTC_SetTime+0x1a>
 8002924:	2302      	movs	r3, #2
 8002926:	e08b      	b.n	8002a40 <HAL_RTC_SetTime+0x132>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	22ca      	movs	r2, #202	; 0xca
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2253      	movs	r2, #83	; 0x53
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f92a 	bl	8002ba2 <RTC_EnterInitMode>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d163      	bne.n	8002a20 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d126      	bne.n	80029ac <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f984 	bl	8002c84 <RTC_ByteToBcd2>
 800297c:	4603      	mov	r3, r0
 800297e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 f97d 	bl	8002c84 <RTC_ByteToBcd2>
 800298a:	4603      	mov	r3, r0
 800298c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800298e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	789b      	ldrb	r3, [r3, #2]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f975 	bl	8002c84 <RTC_ByteToBcd2>
 800299a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800299c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e018      	b.n	80029de <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029cc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029d2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	78db      	ldrb	r3, [r3, #3]
 80029d8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80029e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80029ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f8f6 	bl	8002c08 <RTC_ExitInitMode>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}

08002a48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_RTC_SetDate+0x1a>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e075      	b.n	8002b4e <HAL_RTC_SetDate+0x106>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10e      	bne.n	8002a96 <HAL_RTC_SetDate+0x4e>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	f023 0310 	bic.w	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	330a      	adds	r3, #10
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11c      	bne.n	8002ad6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	78db      	ldrb	r3, [r3, #3]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f8ef 	bl	8002c84 <RTC_ByteToBcd2>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8e8 	bl	8002c84 <RTC_ByteToBcd2>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ab8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	789b      	ldrb	r3, [r3, #2]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f8e0 	bl	8002c84 <RTC_ByteToBcd2>
 8002ac4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ac6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e00e      	b.n	8002af4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	78db      	ldrb	r3, [r3, #3]
 8002ada:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ae2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ae8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	22ca      	movs	r2, #202	; 0xca
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2253      	movs	r2, #83	; 0x53
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f84c 	bl	8002ba2 <RTC_EnterInitMode>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10c      	bne.n	8002b2e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b22:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f86f 	bl	8002c08 <RTC_ExitInitMode>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	22ff      	movs	r2, #255	; 0xff
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd90      	pop	{r4, r7, pc}

08002b56 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b6c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002b6e:	f7fd fead 	bl	80008cc <HAL_GetTick>
 8002b72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b74:	e009      	b.n	8002b8a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b76:	f7fd fea9 	bl	80008cc <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b84:	d901      	bls.n	8002b8a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e007      	b.n	8002b9a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d120      	bne.n	8002bfe <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bc6:	f7fd fe81 	bl	80008cc <HAL_GetTick>
 8002bca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bcc:	e00d      	b.n	8002bea <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002bce:	f7fd fe7d 	bl	80008cc <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bdc:	d905      	bls.n	8002bea <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <RTC_EnterInitMode+0x5c>
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d1e7      	bne.n	8002bce <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c1e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff92 	bl	8002b56 <HAL_RTC_WaitForSynchro>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01e      	beq.n	8002c76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e017      	b.n	8002c76 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c4c:	f023 0320 	bic.w	r3, r3, #32
 8002c50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff7f 	bl	8002b56 <HAL_RTC_WaitForSynchro>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <RTC_ExitInitMode+0x78>)
 8002c70:	f043 0320 	orr.w	r3, r3, #32
 8002c74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40002800 	.word	0x40002800

08002c84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002c96:	e005      	b.n	8002ca4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	3b0a      	subs	r3, #10
 8002ca2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	2b09      	cmp	r3, #9
 8002ca8:	d8f6      	bhi.n	8002c98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e07f      	b.n	8002dde <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	22ca      	movs	r2, #202	; 0xca
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2253      	movs	r2, #83	; 0x53
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d1e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d120      	bne.n	8002d70 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002d2e:	f7fd fdcd 	bl	80008cc <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002d34:	e015      	b.n	8002d62 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d36:	f7fd fdc9 	bl	80008cc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d44:	d90d      	bls.n	8002d62 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03d      	b.n	8002dde <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0e2      	beq.n	8002d36 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 0107 	bic.w	r1, r3, #7
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dc2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002df6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dfa:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e1a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f80b 	bl	8002e38 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <__libc_init_array>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4d0d      	ldr	r5, [pc, #52]	; (8002e84 <__libc_init_array+0x38>)
 8002e50:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <__libc_init_array+0x3c>)
 8002e52:	1b64      	subs	r4, r4, r5
 8002e54:	10a4      	asrs	r4, r4, #2
 8002e56:	2600      	movs	r6, #0
 8002e58:	42a6      	cmp	r6, r4
 8002e5a:	d109      	bne.n	8002e70 <__libc_init_array+0x24>
 8002e5c:	4d0b      	ldr	r5, [pc, #44]	; (8002e8c <__libc_init_array+0x40>)
 8002e5e:	4c0c      	ldr	r4, [pc, #48]	; (8002e90 <__libc_init_array+0x44>)
 8002e60:	f000 f820 	bl	8002ea4 <_init>
 8002e64:	1b64      	subs	r4, r4, r5
 8002e66:	10a4      	asrs	r4, r4, #2
 8002e68:	2600      	movs	r6, #0
 8002e6a:	42a6      	cmp	r6, r4
 8002e6c:	d105      	bne.n	8002e7a <__libc_init_array+0x2e>
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e74:	4798      	blx	r3
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7ee      	b.n	8002e58 <__libc_init_array+0xc>
 8002e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7e:	4798      	blx	r3
 8002e80:	3601      	adds	r6, #1
 8002e82:	e7f2      	b.n	8002e6a <__libc_init_array+0x1e>
 8002e84:	08002f00 	.word	0x08002f00
 8002e88:	08002f00 	.word	0x08002f00
 8002e8c:	08002f00 	.word	0x08002f00
 8002e90:	08002f04 	.word	0x08002f04

08002e94 <memset>:
 8002e94:	4402      	add	r2, r0
 8002e96:	4603      	mov	r3, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
