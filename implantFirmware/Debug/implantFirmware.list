
implantFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002f78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002f78  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecf  00000000  00000000  0002e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00030000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  00030b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d0f  00000000  00000000  000315f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1e1  00000000  00000000  00033307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf06e  00000000  00000000  000404e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  000ff5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002f08 	.word	0x08002f08

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002f08 	.word	0x08002f08

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ce:	b095      	sub	sp, #84	; 0x54
 80001d0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb44 	bl	800085e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f84f 	bl	8000278 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f95b 	bl	8000494 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f8b3 	bl	8000348 <MX_I2C1_Init>
  MX_RTC_Init();
 80001e2:	f000 f8ef 	bl	80003c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  static const uint16_t REG_DATA = 0x2;
  uint8_t data = 0x3;
 80001e6:	2303      	movs	r3, #3
 80001e8:	71fb      	strb	r3, [r7, #7]


  NFC_WriteToUserAddress(&ret, hi2c1, REG_DATA, data);
 80001ea:	4b20      	ldr	r3, [pc, #128]	; (800026c <main+0xa0>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	4e20      	ldr	r6, [pc, #128]	; (8000270 <main+0xa4>)
 80001f0:	f107 0c06 	add.w	ip, r7, #6
 80001f4:	79fa      	ldrb	r2, [r7, #7]
 80001f6:	9211      	str	r2, [sp, #68]	; 0x44
 80001f8:	9310      	str	r3, [sp, #64]	; 0x40
 80001fa:	466d      	mov	r5, sp
 80001fc:	f106 040c 	add.w	r4, r6, #12
 8000200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000210:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000214:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000218:	4660      	mov	r0, ip
 800021a:	f000 f97f 	bl	800051c <NFC_WriteToUserAddress>
  HAL_Delay(100);
 800021e:	2064      	movs	r0, #100	; 0x64
 8000220:	f000 fb92 	bl	8000948 <HAL_Delay>
  NFC_EnableEH(&ret, hi2c1);
 8000224:	4e12      	ldr	r6, [pc, #72]	; (8000270 <main+0xa4>)
 8000226:	f107 0c06 	add.w	ip, r7, #6
 800022a:	466d      	mov	r5, sp
 800022c:	f106 040c 	add.w	r4, r6, #12
 8000230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800023a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800023c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000240:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000244:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000248:	4660      	mov	r0, ip
 800024a:	f000 f9a3 	bl	8000594 <NFC_EnableEH>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (ret == 0){
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d107      	bne.n	8000264 <main+0x98>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <main+0xa8>)
 8000258:	f000 fe2e 	bl	8000eb8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800025c:	2180      	movs	r1, #128	; 0x80
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <main+0xa8>)
 8000260:	f000 fe2a 	bl	8000eb8 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(100);
 8000264:	2064      	movs	r0, #100	; 0x64
 8000266:	f000 fb6f 	bl	8000948 <HAL_Delay>
	  if (ret == 0){
 800026a:	e7f0      	b.n	800024e <main+0x82>
 800026c:	08002f20 	.word	0x08002f20
 8000270:	20000028 	.word	0x20000028
 8000274:	48000400 	.word	0x48000400

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0ac      	sub	sp, #176	; 0xb0
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fe36 	bl	8002ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2254      	movs	r2, #84	; 0x54
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fe28 	bl	8002ef8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80002a8:	2318      	movs	r3, #24
 80002aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002be:	2360      	movs	r3, #96	; 0x60
 80002c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fa00 	bl	80016d4 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002da:	f000 f919 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002e2:	2300      	movs	r3, #0
 80002e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fe0b 	bl	8001f14 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000304:	f000 f904 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <SystemClock_Config+0xcc>)
 800030a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800030c:	2300      	movs	r3, #0
 800030e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000314:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ffc9 	bl	80022b0 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000324:	f000 f8f4 	bl	8000510 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000328:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032c:	f001 f97c 	bl	8001628 <HAL_PWREx_ControlVoltageScaling>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000336:	f000 f8eb 	bl	8000510 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	37b0      	adds	r7, #176	; 0xb0
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	00020040 	.word	0x00020040

08000348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_I2C1_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <MX_I2C1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_I2C1_Init+0x74>)
 8000354:	f640 6214 	movw	r2, #3604	; 0xe14
 8000358:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_I2C1_Init+0x74>)
 8000362:	2201      	movs	r2, #1
 8000364:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_I2C1_Init+0x74>)
 8000386:	f000 fdb1 	bl	8000eec <HAL_I2C_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f8be 	bl	8000510 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000394:	2100      	movs	r1, #0
 8000396:	4809      	ldr	r0, [pc, #36]	; (80003bc <MX_I2C1_Init+0x74>)
 8000398:	f001 f8a0 	bl	80014dc <HAL_I2CEx_ConfigAnalogFilter>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003a2:	f000 f8b5 	bl	8000510 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a6:	2100      	movs	r1, #0
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_I2C1_Init+0x74>)
 80003aa:	f001 f8e2 	bl	8001572 <HAL_I2CEx_ConfigDigitalFilter>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003b4:	f000 f8ac 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40005400 	.word	0x40005400

080003c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80003d8:	2300      	movs	r3, #0
 80003da:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003dc:	4b2b      	ldr	r3, [pc, #172]	; (800048c <MX_RTC_Init+0xc8>)
 80003de:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <MX_RTC_Init+0xcc>)
 80003e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003e2:	4b2a      	ldr	r3, [pc, #168]	; (800048c <MX_RTC_Init+0xc8>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 0x7c;
 80003e8:	4b28      	ldr	r3, [pc, #160]	; (800048c <MX_RTC_Init+0xc8>)
 80003ea:	227c      	movs	r2, #124	; 0x7c
 80003ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 0x127;
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <MX_RTC_Init+0xc8>)
 80003f0:	f240 1227 	movw	r2, #295	; 0x127
 80003f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <MX_RTC_Init+0xc8>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <MX_RTC_Init+0xc8>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <MX_RTC_Init+0xc8>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <MX_RTC_Init+0xc8>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800040e:	481f      	ldr	r0, [pc, #124]	; (800048c <MX_RTC_Init+0xc8>)
 8000410:	f002 fa34 	bl	800287c <HAL_RTC_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800041a:	f000 f879 	bl	8000510 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800041e:	2300      	movs	r3, #0
 8000420:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000422:	2300      	movs	r3, #0
 8000424:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000426:	2300      	movs	r3, #0
 8000428:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <MX_RTC_Init+0xc8>)
 800043a:	f002 fa9a 	bl	8002972 <HAL_RTC_SetTime>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000444:	f000 f864 	bl	8000510 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000448:	2301      	movs	r3, #1
 800044a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800044c:	2301      	movs	r3, #1
 800044e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000450:	2301      	movs	r3, #1
 8000452:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000454:	2300      	movs	r3, #0
 8000456:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	2201      	movs	r2, #1
 800045c:	4619      	mov	r1, r3
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_RTC_Init+0xc8>)
 8000460:	f002 fb24 	bl	8002aac <HAL_RTC_SetDate>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800046a:	f000 f851 	bl	8000510 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	4806      	ldr	r0, [pc, #24]	; (800048c <MX_RTC_Init+0xc8>)
 8000474:	f002 fc58 	bl	8002d28 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 800047e:	f000 f847 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000074 	.word	0x20000074
 8000490:	40002800 	.word	0x40002800

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_GPIO_Init+0x74>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a16      	ldr	r2, [pc, #88]	; (8000508 <MX_GPIO_Init+0x74>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_GPIO_Init+0x74>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_GPIO_Init+0x74>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <MX_GPIO_Init+0x74>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_GPIO_Init+0x74>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	21c0      	movs	r1, #192	; 0xc0
 80004de:	480b      	ldr	r0, [pc, #44]	; (800050c <MX_GPIO_Init+0x78>)
 80004e0:	f000 fcd2 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004e4:	23c0      	movs	r3, #192	; 0xc0
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_GPIO_Init+0x78>)
 80004fc:	f000 fb5a 	bl	8000bb4 <HAL_GPIO_Init>

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	48000400 	.word	0x48000400

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <NFC_WriteToUserAddress>:
#include "nfc_chip.h"

int NFC_WriteToUserAddress(HAL_StatusTypeDef *ret, I2C_HandleTypeDef i2c,uint16_t address, uint8_t data){
 800051c:	b084      	sub	sp, #16
 800051e:	b580      	push	{r7, lr}
 8000520:	b086      	sub	sp, #24
 8000522:	af02      	add	r7, sp, #8
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	f107 001c 	add.w	r0, r7, #28
 800052a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const uint8_t st25dv_ADDR = 0b10100110;
	uint8_t buf[3];
	buf[0] = (address & 0xFF00)/16; // most significant byte
 800052e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000536:	2b00      	cmp	r3, #0
 8000538:	da00      	bge.n	800053c <NFC_WriteToUserAddress+0x20>
 800053a:	330f      	adds	r3, #15
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b2db      	uxtb	r3, r3
 8000540:	733b      	strb	r3, [r7, #12]
	buf[1] = (address & 0x00FF); // least significan byte
 8000542:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000546:	b2db      	uxtb	r3, r3
 8000548:	737b      	strb	r3, [r7, #13]
	buf[2] = data;
 800054a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800054e:	73bb      	strb	r3, [r7, #14]

	*ret = HAL_I2C_Master_Transmit(&i2c, st25dv_ADDR, buf, 3, HAL_MAX_DELAY);
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <NFC_WriteToUserAddress+0x74>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b299      	uxth	r1, r3
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	f107 001c 	add.w	r0, r7, #28
 800055e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2303      	movs	r3, #3
 8000566:	f000 fd51 	bl	800100c <HAL_I2C_Master_Transmit>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	701a      	strb	r2, [r3, #0]
	  if ( *ret != HAL_OK ) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <NFC_WriteToUserAddress+0x62>
	        //printf("Error Tx\r\n");
	        return 1;
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <NFC_WriteToUserAddress+0x64>
	  } else{
		  //printf("success \n");
		  return 0;
 800057e:	2300      	movs	r3, #0
	  }

	return 1;

}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800058a:	b004      	add	sp, #16
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	08002f22 	.word	0x08002f22

08000594 <NFC_EnableEH>:
	return 1;

}


int NFC_EnableEH(HAL_StatusTypeDef *ret, I2C_HandleTypeDef i2c){
 8000594:	b084      	sub	sp, #16
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af02      	add	r7, sp, #8
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	f107 001c 	add.w	r0, r7, #28
 80005a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static const uint8_t st25dv_ADDR = 0b10100110;
	uint16_t address = 0x2002;
 80005a6:	f242 0302 	movw	r3, #8194	; 0x2002
 80005aa:	81fb      	strh	r3, [r7, #14]
	uint8_t buf[3];
	buf[0] = (address & (uint16_t)0xFF00)/256; // most significant byte
 80005ac:	89fb      	ldrh	r3, [r7, #14]
 80005ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da00      	bge.n	80005b8 <NFC_EnableEH+0x24>
 80005b6:	33ff      	adds	r3, #255	; 0xff
 80005b8:	121b      	asrs	r3, r3, #8
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	723b      	strb	r3, [r7, #8]
	buf[1] = (address & (uint16_t)0x00FF); // least significan byte
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	727b      	strb	r3, [r7, #9]
	buf[2] = 0x0F;
 80005c4:	230f      	movs	r3, #15
 80005c6:	72bb      	strb	r3, [r7, #10]

	*ret = HAL_I2C_Master_Transmit(&i2c, st25dv_ADDR, buf, 3, HAL_MAX_DELAY);
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <NFC_EnableEH+0x74>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b299      	uxth	r1, r3
 80005ce:	f107 0208 	add.w	r2, r7, #8
 80005d2:	f107 001c 	add.w	r0, r7, #28
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2303      	movs	r3, #3
 80005de:	f000 fd15 	bl	800100c <HAL_I2C_Master_Transmit>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	701a      	strb	r2, [r3, #0]
		  if ( *ret != HAL_OK ) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <NFC_EnableEH+0x62>
		        //printf("Error Tx\r\n");
		        return 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <NFC_EnableEH+0x64>
		  } else{
			  //printf("success \n");
			  return 0;
 80005f6:	2300      	movs	r3, #0
		  }

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000602:	b004      	add	sp, #16
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	08002f23 	.word	0x08002f23

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <HAL_MspInit+0x54>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <HAL_MspInit+0x54>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6613      	str	r3, [r2, #96]	; 0x60
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <HAL_MspInit+0x54>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_MspInit+0x54>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <HAL_MspInit+0x54>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6593      	str	r3, [r2, #88]	; 0x58
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_MspInit+0x54>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000642:	2006      	movs	r0, #6
 8000644:	f000 fa74 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	2005      	movs	r0, #5
 800064e:	f000 fa7a 	bl	8000b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000652:	2005      	movs	r0, #5
 8000654:	f000 fa93 	bl	8000b7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d129      	bne.n	80006da <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800069e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a4:	2312      	movs	r3, #18
 80006a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b0:	2304      	movs	r3, #4
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f000 fa79 	bl	8000bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006cc:	6593      	str	r3, [r2, #88]	; 0x58
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40005400 	.word	0x40005400
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_RTC_MspInit+0x3c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d10f      	bne.n	800071e <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <HAL_RTC_MspInit+0x40>)
 8000700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000704:	4a09      	ldr	r2, [pc, #36]	; (800072c <HAL_RTC_MspInit+0x40>)
 8000706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2003      	movs	r0, #3
 8000714:	f000 fa17 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 fa30 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40002800 	.word	0x40002800
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 f8c4 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <RTC_WKUP_IRQHandler+0x10>)
 800078a:	f002 fb61 	bl	8002e50 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000074 	.word	0x20000074

08000798 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <SystemInit+0x5c>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <SystemInit+0x5c>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <SystemInit+0x60>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <SystemInit+0x60>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <SystemInit+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <SystemInit+0x60>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <SystemInit+0x60>)
 80007d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <SystemInit+0x60>)
 80007e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <SystemInit+0x60>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <SystemInit+0x60>)
 80007ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SystemInit+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	40021000 	.word	0x40021000

0800080c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000810:	f7ff ffca 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000814:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000816:	e003      	b.n	8000820 <LoopCopyDataInit>

08000818 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800081a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800081c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800081e:	3104      	adds	r1, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000820:	480a      	ldr	r0, [pc, #40]	; (800084c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000824:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000826:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000828:	d3f6      	bcc.n	8000818 <CopyDataInit>
	ldr	r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopForever+0x12>)
	b	LoopFillZerobss
 800082c:	e002      	b.n	8000834 <LoopFillZerobss>

0800082e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800082e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000830:	f842 3b04 	str.w	r3, [r2], #4

08000834 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <LoopForever+0x16>)
	cmp	r2, r3
 8000836:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000838:	d3f9      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f002 fb39 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083e:	f7ff fcc5 	bl	80001cc <main>

08000842 <LoopForever>:

LoopForever:
    b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000844:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000848:	08002f6c 	.word	0x08002f6c
	ldr	r0, =_sdata
 800084c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000850:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000854:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000858:	2000009c 	.word	0x2000009c

0800085c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_IRQHandler>

0800085e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000864:	2300      	movs	r3, #0
 8000866:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f961 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f80e 	bl	8000890 <HAL_InitTick>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	e001      	b.n	8000884 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000880:	f7ff fec4 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000884:	79fb      	ldrb	r3, [r7, #7]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_InitTick+0x6c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d023      	beq.n	80008ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_InitTick+0x70>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_InitTick+0x6c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f96d 	bl	8000b9a <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10f      	bne.n	80008e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d809      	bhi.n	80008e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d4:	f000 f937 	bl	8000b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_InitTick+0x74>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e007      	b.n	80008f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e004      	b.n	80008f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	e001      	b.n	80008f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000000 	.word	0x20000000
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	20000098 	.word	0x20000098

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000098 	.word	0x20000098

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <__NVIC_EnableIRQ+0x38>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff29 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff3e 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff31 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa2 	bl	8000aec <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc2:	e148      	b.n	8000e56 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 813a 	beq.w	8000e50 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d00b      	beq.n	8000bfc <HAL_GPIO_Init+0x48>
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf0:	2b11      	cmp	r3, #17
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b12      	cmp	r3, #18
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 0201 	and.w	r2, r3, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0xea>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b12      	cmp	r3, #18
 8000c9c:	d123      	bne.n	8000ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	6939      	ldr	r1, [r7, #16]
 8000ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0203 	and.w	r2, r3, #3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8094 	beq.w	8000e50 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b52      	ldr	r3, [pc, #328]	; (8000e74 <HAL_GPIO_Init+0x2c0>)
 8000d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2c:	4a51      	ldr	r2, [pc, #324]	; (8000e74 <HAL_GPIO_Init+0x2c0>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6613      	str	r3, [r2, #96]	; 0x60
 8000d34:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <HAL_GPIO_Init+0x2c0>)
 8000d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d40:	4a4d      	ldr	r2, [pc, #308]	; (8000e78 <HAL_GPIO_Init+0x2c4>)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3302      	adds	r3, #2
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d6a:	d00d      	beq.n	8000d88 <HAL_GPIO_Init+0x1d4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <HAL_GPIO_Init+0x2c8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_Init+0x1d0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a42      	ldr	r2, [pc, #264]	; (8000e80 <HAL_GPIO_Init+0x2cc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d101      	bne.n	8000d80 <HAL_GPIO_Init+0x1cc>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x1d6>
 8000d80:	2307      	movs	r3, #7
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x1d6>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x1d6>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d9a:	4937      	ldr	r1, [pc, #220]	; (8000e78 <HAL_GPIO_Init+0x2c4>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dcc:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f47f aeaf 	bne.w	8000bc4 <HAL_GPIO_Init+0x10>
  }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	48000400 	.word	0x48000400
 8000e80:	48000800 	.word	0x48000800
 8000e84:	40010400 	.word	0x40010400

08000e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43d9      	mvns	r1, r3
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	400b      	ands	r3, r1
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	619a      	str	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e081      	b.n	8001002 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d106      	bne.n	8000f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fba6 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2224      	movs	r2, #36	; 0x24
 8000f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0201 	bic.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d107      	bne.n	8000f66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	e006      	b.n	8000f74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d104      	bne.n	8000f86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	ea42 0103 	orr.w	r1, r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	021a      	lsls	r2, r3, #8
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69d9      	ldr	r1, [r3, #28]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2220      	movs	r2, #32
 8000fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	817b      	strh	r3, [r7, #10]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b20      	cmp	r3, #32
 800102a:	f040 80da 	bne.w	80011e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_I2C_Master_Transmit+0x30>
 8001038:	2302      	movs	r3, #2
 800103a:	e0d3      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1d8>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001044:	f7ff fc74 	bl	8000930 <HAL_GetTick>
 8001048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2319      	movs	r3, #25
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f8f0 	bl	800123c <I2C_WaitOnFlagUntilTimeout>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e0be      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2221      	movs	r2, #33	; 0x21
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2210      	movs	r2, #16
 8001072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001092:	b29b      	uxth	r3, r3
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d90e      	bls.n	80010b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	8979      	ldrh	r1, [r7, #10]
 80010a6:	4b51      	ldr	r3, [pc, #324]	; (80011ec <HAL_I2C_Master_Transmit+0x1e0>)
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f9e6 	bl	8001480 <I2C_TransferConfig>
 80010b4:	e06c      	b.n	8001190 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	8979      	ldrh	r1, [r7, #10]
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <HAL_I2C_Master_Transmit+0x1e0>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 f9d5 	bl	8001480 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010d6:	e05b      	b.n	8001190 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	6a39      	ldr	r1, [r7, #32]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f8ed 	bl	80012bc <I2C_WaitOnTXISFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e07b      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001114:	3b01      	subs	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001120:	b29b      	uxth	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d034      	beq.n	8001190 <HAL_I2C_Master_Transmit+0x184>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112a:	2b00      	cmp	r3, #0
 800112c:	d130      	bne.n	8001190 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	2200      	movs	r2, #0
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f87f 	bl	800123c <I2C_WaitOnFlagUntilTimeout>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e04d      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	2bff      	cmp	r3, #255	; 0xff
 8001150:	d90e      	bls.n	8001170 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	22ff      	movs	r2, #255	; 0xff
 8001156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115c:	b2da      	uxtb	r2, r3
 800115e:	8979      	ldrh	r1, [r7, #10]
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f989 	bl	8001480 <I2C_TransferConfig>
 800116e:	e00f      	b.n	8001190 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117e:	b2da      	uxtb	r2, r3
 8001180:	8979      	ldrh	r1, [r7, #10]
 8001182:	2300      	movs	r3, #0
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f978 	bl	8001480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001194:	b29b      	uxth	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d19e      	bne.n	80010d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	6a39      	ldr	r1, [r7, #32]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f8cc 	bl	800133c <I2C_WaitOnSTOPFlagUntilTimeout>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e01a      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2220      	movs	r2, #32
 80011b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80011c2:	400b      	ands	r3, r1
 80011c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2220      	movs	r2, #32
 80011ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80011e2:	2302      	movs	r3, #2
  }
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	80002000 	.word	0x80002000
 80011f0:	fe00e800 	.word	0xfe00e800

080011f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b02      	cmp	r3, #2
 8001208:	d103      	bne.n	8001212 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d007      	beq.n	8001230 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	619a      	str	r2, [r3, #24]
  }
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800124c:	e022      	b.n	8001294 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001254:	d01e      	beq.n	8001294 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001256:	f7ff fb6b 	bl	8000930 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d302      	bcc.n	800126c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d113      	bne.n	8001294 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f043 0220 	orr.w	r2, r3, #32
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2220      	movs	r2, #32
 800127c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e00f      	b.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4013      	ands	r3, r2
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d0cd      	beq.n	800124e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012c8:	e02c      	b.n	8001324 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f870 	bl	80013b4 <I2C_IsAcknowledgeFailed>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e02a      	b.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e4:	d01e      	beq.n	8001324 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e6:	f7ff fb23 	bl	8000930 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d302      	bcc.n	80012fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d113      	bne.n	8001324 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f043 0220 	orr.w	r2, r3, #32
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2220      	movs	r2, #32
 800130c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e007      	b.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b02      	cmp	r3, #2
 8001330:	d1cb      	bne.n	80012ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001348:	e028      	b.n	800139c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f830 	bl	80013b4 <I2C_IsAcknowledgeFailed>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e026      	b.n	80013ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800135e:	f7ff fae7 	bl	8000930 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d302      	bcc.n	8001374 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d113      	bne.n	800139c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	f043 0220 	orr.w	r2, r3, #32
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2220      	movs	r2, #32
 8001384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e007      	b.n	80013ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	2b20      	cmp	r3, #32
 80013a8:	d1cf      	bne.n	800134a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d151      	bne.n	8001472 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ce:	e022      	b.n	8001416 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d6:	d01e      	beq.n	8001416 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d8:	f7ff faaa 	bl	8000930 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d302      	bcc.n	80013ee <I2C_IsAcknowledgeFailed+0x3a>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d113      	bne.n	8001416 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f043 0220 	orr.w	r2, r3, #32
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2220      	movs	r2, #32
 80013fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e02e      	b.n	8001474 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0320 	and.w	r3, r3, #32
 8001420:	2b20      	cmp	r3, #32
 8001422:	d1d5      	bne.n	80013d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2210      	movs	r2, #16
 800142a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fedd 	bl	80011f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <I2C_IsAcknowledgeFailed+0xc8>)
 8001446:	400b      	ands	r3, r1
 8001448:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f043 0204 	orr.w	r2, r3, #4
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	fe00e800 	.word	0xfe00e800

08001480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	817b      	strh	r3, [r7, #10]
 800148e:	4613      	mov	r3, r2
 8001490:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	0d5b      	lsrs	r3, r3, #21
 800149c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <I2C_TransferConfig+0x58>)
 80014a2:	430b      	orrs	r3, r1
 80014a4:	43db      	mvns	r3, r3
 80014a6:	ea02 0103 	and.w	r1, r2, r3
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	041b      	lsls	r3, r3, #16
 80014b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	431a      	orrs	r2, r3
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	03ff63ff 	.word	0x03ff63ff

080014dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d138      	bne.n	8001564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e032      	b.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800152e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2220      	movs	r2, #32
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001564:	2302      	movs	r3, #2
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b20      	cmp	r3, #32
 8001586:	d139      	bne.n	80015fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001592:	2302      	movs	r3, #2
 8001594:	e033      	b.n	80015fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
  }
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_PWREx_GetVoltageRange+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40007000 	.word	0x40007000

08001628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001636:	d130      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001644:	d038      	beq.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2232      	movs	r2, #50	; 0x32
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	3301      	adds	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800166c:	e002      	b.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3b01      	subs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001680:	d102      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f2      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001694:	d110      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e00f      	b.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a6:	d007      	beq.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007000 	.word	0x40007000
 80016cc:	20000000 	.word	0x20000000
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 bc11 	b.w	8001f0a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e8:	4ba0      	ldr	r3, [pc, #640]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f2:	4b9e      	ldr	r3, [pc, #632]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80e4 	beq.w	80018d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_RCC_OscConfig+0x4c>
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	f040 808b 	bne.w	800182e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b01      	cmp	r3, #1
 800171c:	f040 8087 	bne.w	800182e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001720:	4b92      	ldr	r3, [pc, #584]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x64>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e3e8      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	4b8b      	ldr	r3, [pc, #556]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_RCC_OscConfig+0x7e>
 8001748:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001750:	e005      	b.n	800175e <HAL_RCC_OscConfig+0x8a>
 8001752:	4b86      	ldr	r3, [pc, #536]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175e:	4293      	cmp	r3, r2
 8001760:	d223      	bcs.n	80017aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd42 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e3c9      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001776:	4b7d      	ldr	r3, [pc, #500]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7c      	ldr	r2, [pc, #496]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b7a      	ldr	r3, [pc, #488]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4977      	ldr	r1, [pc, #476]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001794:	4b75      	ldr	r3, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4972      	ldr	r1, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e025      	b.n	80017f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6f      	ldr	r2, [pc, #444]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6d      	ldr	r3, [pc, #436]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	496a      	ldr	r1, [pc, #424]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	4965      	ldr	r1, [pc, #404]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd02 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e389      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f6:	f000 fc6f 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b5b      	ldr	r3, [pc, #364]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	495a      	ldr	r1, [pc, #360]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x2a0>)
 8001814:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001816:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCC_OscConfig+0x2a4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f838 	bl	8000890 <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d052      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	e36d      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d032      	beq.n	800189c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a4c      	ldr	r2, [pc, #304]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001842:	f7ff f875 	bl	8000930 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184a:	f7ff f871 	bl	8000930 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e356      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001868:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3f      	ldr	r2, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	493a      	ldr	r1, [pc, #232]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4935      	ldr	r1, [pc, #212]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
 800189a:	e01a      	b.n	80018d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a8:	f7ff f842 	bl	8000930 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b0:	f7ff f83e 	bl	8000930 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e323      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1dc>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d073      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x21c>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d10e      	bne.n	8001908 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_OscConfig+0x298>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d063      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d15f      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e300      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x24c>
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0x288>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x270>
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0x288>
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_RCC_OscConfig+0x298>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_RCC_OscConfig+0x298>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01b      	beq.n	800199c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7fe ffe4 	bl	8000930 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	e010      	b.n	800198e <HAL_RCC_OscConfig+0x2ba>
 800196c:	40021000 	.word	0x40021000
 8001970:	08002f24 	.word	0x08002f24
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7fe ffd8 	bl	8000930 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e2bd      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198e:	4baf      	ldr	r3, [pc, #700]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x2a8>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7fe ffc8 	bl	8000930 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7fe ffc4 	bl	8000930 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e2a9      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b6:	4ba5      	ldr	r3, [pc, #660]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2d0>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d060      	beq.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_OscConfig+0x310>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d119      	bne.n	8001a12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d116      	bne.n	8001a12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	4b99      	ldr	r3, [pc, #612]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x328>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e286      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4990      	ldr	r1, [pc, #576]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	e040      	b.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d023      	beq.n	8001a62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1a:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a8b      	ldr	r2, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7fe ff83 	bl	8000930 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7fe ff7f 	bl	8000930 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e264      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a40:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	497c      	ldr	r1, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e018      	b.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a79      	ldr	r2, [pc, #484]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7fe ff5f 	bl	8000930 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7fe ff5b 	bl	8000930 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e240      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a88:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d03c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7fe ff3a 	bl	8000930 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7fe ff36 	bl	8000930 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e21b      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad2:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ef      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x3ec>
 8001ae0:	e01b      	b.n	8001b1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7fe ff1d 	bl	8000930 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7fe ff19 	bl	8000930 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1fe      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ef      	bne.n	8001afa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80a6 	beq.w	8001c74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10d      	bne.n	8001b54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b54:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_OscConfig+0x57c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d118      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b60:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x57c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x57c>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6c:	f7fe fee0 	bl	8000930 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b74:	f7fe fedc 	bl	8000930 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1c1      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x57c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x4d8>
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001baa:	e024      	b.n	8001bf6 <HAL_RCC_OscConfig+0x522>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d110      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x502>
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a24      	ldr	r2, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd4:	e00f      	b.n	8001bf6 <HAL_RCC_OscConfig+0x522>
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	4a1b      	ldr	r2, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001bee:	f023 0304 	bic.w	r3, r3, #4
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7fe fe97 	bl	8000930 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe fe93 	bl	8000930 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e176      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0ed      	beq.n	8001c06 <HAL_RCC_OscConfig+0x532>
 8001c2a:	e01a      	b.n	8001c62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7fe fe80 	bl	8000930 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c32:	e00f      	b.n	8001c54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7fe fe7c 	bl	8000930 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d906      	bls.n	8001c54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e15f      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c54:	4baa      	ldr	r3, [pc, #680]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e8      	bne.n	8001c34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4ba5      	ldr	r3, [pc, #660]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	4aa4      	ldr	r2, [pc, #656]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c88:	4b9d      	ldr	r3, [pc, #628]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8e:	4a9c      	ldr	r2, [pc, #624]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7fe fe4a 	bl	8000930 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca0:	f7fe fe46 	bl	8000930 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e12b      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cb2:	4b93      	ldr	r3, [pc, #588]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ef      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x5cc>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc2:	4b8f      	ldr	r3, [pc, #572]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc8:	4a8d      	ldr	r2, [pc, #564]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7fe fe2d 	bl	8000930 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cda:	f7fe fe29 	bl	8000930 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e10e      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8102 	beq.w	8001f08 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	f040 80c5 	bne.w	8001e98 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0203 	and.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d12c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d123      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d11b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d113      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	3b01      	subs	r3, #1
 8001d62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d109      	bne.n	8001d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d067      	beq.n	8001e4c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d062      	beq.n	8001e48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0bb      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5a      	ldr	r2, [pc, #360]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9e:	f7fe fdc7 	bl	8000930 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe fdc3 	bl	8000930 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0a8      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db8:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_RCC_OscConfig+0x830>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	4311      	orrs	r1, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dde:	0212      	lsls	r2, r2, #8
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de6:	0852      	lsrs	r2, r2, #1
 8001de8:	3a01      	subs	r2, #1
 8001dea:	0552      	lsls	r2, r2, #21
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df2:	0852      	lsrs	r2, r2, #1
 8001df4:	3a01      	subs	r2, #1
 8001df6:	0652      	lsls	r2, r2, #25
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dfe:	06d2      	lsls	r2, r2, #27
 8001e00:	430a      	orrs	r2, r1
 8001e02:	493f      	ldr	r1, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a39      	ldr	r2, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e20:	f7fe fd86 	bl	8000930 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe fd82 	bl	8000930 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e067      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e46:	e05f      	b.n	8001f08 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e05e      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d157      	bne.n	8001f08 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e64:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e70:	f7fe fd5e 	bl	8000930 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe fd5a 	bl	8000930 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e03f      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x7a4>
 8001e96:	e037      	b.n	8001f08 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d02d      	beq.n	8001efa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001ebc:	f023 0303 	bic.w	r3, r3, #3
 8001ec0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001ec8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7fe fd2d 	bl	8000930 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe fd29 	bl	8000930 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e00e      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_RCC_OscConfig+0x82c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x806>
 8001ef8:	e006      	b.n	8001f08 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e005      	b.n	8001f0a <HAL_RCC_OscConfig+0x836>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop

08001f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0c8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4961      	ldr	r1, [pc, #388]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d04c      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d121      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e09e      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d115      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e092      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e086      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fac:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e07e      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 0203 	bic.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	493f      	ldr	r1, [pc, #252]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fce:	f7fe fcaf 	bl	8000930 <HAL_GetTick>
 8001fd2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd6:	f7fe fcab 	bl	8000930 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e066      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 020c 	and.w	r2, r3, #12
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d1eb      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	492c      	ldr	r1, [pc, #176]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d210      	bcs.n	800204c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4924      	ldr	r1, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1b0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e036      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4918      	ldr	r1, [pc, #96]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4910      	ldr	r1, [pc, #64]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208a:	f000 f825 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 800208e:	4602      	mov	r2, r0
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	490c      	ldr	r1, [pc, #48]	; (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fbee 	bl	8000890 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80020b8:	7afb      	ldrb	r3, [r7, #11]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08002f24 	.word	0x08002f24
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x34>
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d121      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11e      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e005      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002134:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d102      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e004      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d101      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_RCC_GetSysClockFreq+0x114>)
 800215e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d134      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0xa6>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d003      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0xac>
 800217c:	e005      	b.n	800218a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002180:	617b      	str	r3, [r7, #20]
      break;
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002186:	617b      	str	r3, [r7, #20]
      break;
 8002188:	e002      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	3301      	adds	r3, #1
 800219c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	fb02 f203 	mul.w	r2, r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	0e5b      	lsrs	r3, r3, #25
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	3301      	adds	r3, #1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021d0:	69bb      	ldr	r3, [r7, #24]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08002f34 	.word	0x08002f34
 80021e8:	00f42400 	.word	0x00f42400
 80021ec:	007a1200 	.word	0x007a1200

080021f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002208:	f7ff fa00 	bl	800160c <HAL_PWREx_GetVoltageRange>
 800220c:	6178      	str	r0, [r7, #20]
 800220e:	e014      	b.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff f9f0 	bl	800160c <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d10b      	bne.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d919      	bls.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2ba0      	cmp	r3, #160	; 0xa0
 800224c:	d902      	bls.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e013      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e010      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d902      	bls.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002260:	2303      	movs	r3, #3
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e00a      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d102      	bne.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e004      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b70      	cmp	r3, #112	; 0x70
 8002276:	d101      	bne.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 0207 	bic.w	r2, r3, #7
 8002284:	4909      	ldr	r1, [pc, #36]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d031      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d4:	d01a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022da:	d814      	bhi.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e4:	d10f      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022e6:	4bac      	ldr	r3, [pc, #688]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4aab      	ldr	r2, [pc, #684]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f2:	e00c      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f9cc 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002304:	e003      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	74fb      	strb	r3, [r7, #19]
      break;
 800230a:	e000      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800230c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002314:	4ba0      	ldr	r3, [pc, #640]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	499d      	ldr	r1, [pc, #628]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232a:	e001      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8099 	beq.w	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002342:	4b95      	ldr	r3, [pc, #596]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	4a8e      	ldr	r2, [pc, #568]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6593      	str	r3, [r2, #88]	; 0x58
 8002364:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002374:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a88      	ldr	r2, [pc, #544]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002380:	f7fe fad6 	bl	8000930 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002386:	e009      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fe fad2 	bl	8000930 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d902      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	74fb      	strb	r3, [r7, #19]
        break;
 800239a:	e005      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d155      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ae:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01e      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d019      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d6:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	4a6e      	ldr	r2, [pc, #440]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023e6:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	4a6a      	ldr	r2, [pc, #424]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023f6:	4a68      	ldr	r2, [pc, #416]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d016      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fa92 	bl	8000930 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240e:	e00b      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe fa8e 	bl	8000930 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d902      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	74fb      	strb	r3, [r7, #19]
            break;
 8002426:	e006      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ec      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	4953      	ldr	r1, [pc, #332]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002452:	e004      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
 8002458:	e001      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245e:	7c7b      	ldrb	r3, [r7, #17]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4943      	ldr	r1, [pc, #268]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f023 020c 	bic.w	r2, r3, #12
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	493a      	ldr	r1, [pc, #232]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c0:	4b35      	ldr	r3, [pc, #212]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	4932      	ldr	r1, [pc, #200]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	4929      	ldr	r1, [pc, #164]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4921      	ldr	r1, [pc, #132]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	4918      	ldr	r1, [pc, #96]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4910      	ldr	r1, [pc, #64]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d02c      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002588:	d10a      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258a:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a02      	ldr	r2, [pc, #8]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002594:	60d3      	str	r3, [r2, #12]
 8002596:	e015      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2101      	movs	r1, #1
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f871 	bl	8002698 <RCCEx_PLLSAI1_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d028      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	492d      	ldr	r1, [pc, #180]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ee:	d106      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60d3      	str	r3, [r2, #12]
 80025fc:	e011      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002606:	d10c      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f842 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01c      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	4915      	ldr	r1, [pc, #84]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f81f 	bl	8002698 <RCCEx_PLLSAI1_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4904      	ldr	r1, [pc, #16]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800268a:	7cbb      	ldrb	r3, [r7, #18]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000

08002698 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a6:	4b74      	ldr	r3, [pc, #464]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026b2:	4b71      	ldr	r3, [pc, #452]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
       ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ca:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
       ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d047      	beq.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e044      	b.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d018      	beq.n	800271e <RCCEx_PLLSAI1_Config+0x86>
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d825      	bhi.n	800273c <RCCEx_PLLSAI1_Config+0xa4>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d002      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x62>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d009      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x74>
 80026f8:	e020      	b.n	800273c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026fa:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11d      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e01a      	b.n	8002742 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800270c:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e013      	b.n	8002746 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800272a:	4b53      	ldr	r3, [pc, #332]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800273a:	e006      	b.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e004      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800274a:	bf00      	nop
    }

    if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	430b      	orrs	r3, r1
 8002768:	4943      	ldr	r1, [pc, #268]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d17c      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002774:	4b40      	ldr	r3, [pc, #256]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800277e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe f8d6 	bl	8000930 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002788:	f7fe f8d2 	bl	8000930 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
        break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ef      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15f      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d110      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	06d2      	lsls	r2, r2, #27
 80027cc:	430a      	orrs	r2, r1
 80027ce:	492a      	ldr	r1, [pc, #168]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
 80027d4:	e027      	b.n	8002826 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d112      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6892      	ldr	r2, [r2, #8]
 80027ec:	0211      	lsls	r1, r2, #8
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6912      	ldr	r2, [r2, #16]
 80027f2:	0852      	lsrs	r2, r2, #1
 80027f4:	3a01      	subs	r2, #1
 80027f6:	0552      	lsls	r2, r2, #21
 80027f8:	430a      	orrs	r2, r1
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	610b      	str	r3, [r1, #16]
 8002800:	e011      	b.n	8002826 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6952      	ldr	r2, [r2, #20]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0652      	lsls	r2, r2, #25
 800281e:	430a      	orrs	r2, r1
 8002820:	4915      	ldr	r1, [pc, #84]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002830:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe f87d 	bl	8000930 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002838:	e009      	b.n	800284e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800283a:	f7fe f879 	bl	8000930 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d902      	bls.n	800284e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	73fb      	strb	r3, [r7, #15]
          break;
 800284c:	e005      	b.n	800285a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ef      	beq.n	800283a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd ff22 	bl	80006ec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	22ca      	movs	r2, #202	; 0xca
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2253      	movs	r2, #83	; 0x53
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9a0 	bl	8002c06 <RTC_EnterInitMode>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d14b      	bne.n	8002968 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80028de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6919      	ldr	r1, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	041a      	lsls	r2, r3, #16
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f9a3 	bl	8002c6c <RTC_ExitInitMode>
 8002926:	4603      	mov	r3, r0
 8002928:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11b      	bne.n	8002968 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0203 	bic.w	r2, r2, #3
 800293e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002972:	b590      	push	{r4, r7, lr}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RTC_SetTime+0x1a>
 8002988:	2302      	movs	r3, #2
 800298a:	e08b      	b.n	8002aa4 <HAL_RTC_SetTime+0x132>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	22ca      	movs	r2, #202	; 0xca
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2253      	movs	r2, #83	; 0x53
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f92a 	bl	8002c06 <RTC_EnterInitMode>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d163      	bne.n	8002a84 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d126      	bne.n	8002a10 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f984 	bl	8002ce8 <RTC_ByteToBcd2>
 80029e0:	4603      	mov	r3, r0
 80029e2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f97d 	bl	8002ce8 <RTC_ByteToBcd2>
 80029ee:	4603      	mov	r3, r0
 80029f0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029f2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f975 	bl	8002ce8 <RTC_ByteToBcd2>
 80029fe:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a00:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e018      	b.n	8002a42 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2200      	movs	r2, #0
 8002a22:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	785b      	ldrb	r3, [r3, #1]
 8002a2e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a30:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a36:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	78db      	ldrb	r3, [r3, #3]
 8002a3c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8f6 	bl	8002c6c <RTC_ExitInitMode>
 8002a80:	4603      	mov	r3, r0
 8002a82:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd90      	pop	{r4, r7, pc}

08002aac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RTC_SetDate+0x1a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e075      	b.n	8002bb2 <HAL_RTC_SetDate+0x106>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10e      	bne.n	8002afa <HAL_RTC_SetDate+0x4e>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	f023 0310 	bic.w	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	330a      	adds	r3, #10
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11c      	bne.n	8002b3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f8ef 	bl	8002ce8 <RTC_ByteToBcd2>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f8e8 	bl	8002ce8 <RTC_ByteToBcd2>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002b1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	789b      	ldrb	r3, [r3, #2]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8e0 	bl	8002ce8 <RTC_ByteToBcd2>
 8002b28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e00e      	b.n	8002b58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	78db      	ldrb	r3, [r3, #3]
 8002b3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002b46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002b4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	22ca      	movs	r2, #202	; 0xca
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2253      	movs	r2, #83	; 0x53
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f84c 	bl	8002c06 <RTC_EnterInitMode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10c      	bne.n	8002b92 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b86:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f86f 	bl	8002c6c <RTC_ExitInitMode>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}

08002bba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bd0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002bd2:	f7fd fead 	bl	8000930 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bd8:	e009      	b.n	8002bee <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bda:	f7fd fea9 	bl	8000930 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be8:	d901      	bls.n	8002bee <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e007      	b.n	8002bfe <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d120      	bne.n	8002c62 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c2a:	f7fd fe81 	bl	8000930 <HAL_GetTick>
 8002c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c30:	e00d      	b.n	8002c4e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c32:	f7fd fe7d 	bl	8000930 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c40:	d905      	bls.n	8002c4e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <RTC_EnterInitMode+0x5c>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d1e7      	bne.n	8002c32 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c82:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff92 	bl	8002bba <HAL_RTC_WaitForSynchro>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01e      	beq.n	8002cda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e017      	b.n	8002cda <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002cb0:	f023 0320 	bic.w	r3, r3, #32
 8002cb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff7f 	bl	8002bba <HAL_RTC_WaitForSynchro>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <RTC_ExitInitMode+0x78>)
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40002800 	.word	0x40002800

08002ce8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002cfa:	e005      	b.n	8002d08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	3b0a      	subs	r3, #10
 8002d06:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	d8f6      	bhi.n	8002cfc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b2db      	uxtb	r3, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e07f      	b.n	8002e42 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ca      	movs	r2, #202	; 0xca
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2253      	movs	r2, #83	; 0x53
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d70:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d82:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d120      	bne.n	8002dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002d92:	f7fd fdcd 	bl	8000930 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002d98:	e015      	b.n	8002dc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d9a:	f7fd fdc9 	bl	8000930 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da8:	d90d      	bls.n	8002dc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e03d      	b.n	8002e42 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0e2      	beq.n	8002d9a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f023 0107 	bic.w	r1, r3, #7
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e06:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e16:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e26:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40010400 	.word	0x40010400

08002e50 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e5e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e7e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f80b 	bl	8002e9c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4d0d      	ldr	r5, [pc, #52]	; (8002ee8 <__libc_init_array+0x38>)
 8002eb4:	4c0d      	ldr	r4, [pc, #52]	; (8002eec <__libc_init_array+0x3c>)
 8002eb6:	1b64      	subs	r4, r4, r5
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	2600      	movs	r6, #0
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	4d0b      	ldr	r5, [pc, #44]	; (8002ef0 <__libc_init_array+0x40>)
 8002ec2:	4c0c      	ldr	r4, [pc, #48]	; (8002ef4 <__libc_init_array+0x44>)
 8002ec4:	f000 f820 	bl	8002f08 <_init>
 8002ec8:	1b64      	subs	r4, r4, r5
 8002eca:	10a4      	asrs	r4, r4, #2
 8002ecc:	2600      	movs	r6, #0
 8002ece:	42a6      	cmp	r6, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed8:	4798      	blx	r3
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee2:	4798      	blx	r3
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	08002f64 	.word	0x08002f64
 8002eec:	08002f64 	.word	0x08002f64
 8002ef0:	08002f64 	.word	0x08002f64
 8002ef4:	08002f68 	.word	0x08002f68

08002ef8 <memset>:
 8002ef8:	4402      	add	r2, r0
 8002efa:	4603      	mov	r3, r0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d100      	bne.n	8002f02 <memset+0xa>
 8002f00:	4770      	bx	lr
 8002f02:	f803 1b01 	strb.w	r1, [r3], #1
 8002f06:	e7f9      	b.n	8002efc <memset+0x4>

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
